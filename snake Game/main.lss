
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000027a  00800100  00001e80  00001f14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000256  0080037a  0080037a  0000218e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000218e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001c6  00000000  00000000  000021ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dc5  00000000  00000000  00002374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002d0  00000000  00000000  00003139  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012e8  00000000  00000000  00003409  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  000046f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032e  00000000  00000000  00004894  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f77  00000000  00000000  00004bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00005b39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	da e0       	ldi	r29, 0x0A	; 10
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	13 e0       	ldi	r17, 0x03	; 3
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	e0 e8       	ldi	r30, 0x80	; 128
      c0:	fe e1       	ldi	r31, 0x1E	; 30
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <.do_copy_data_start>

000000c4 <.do_copy_data_loop>:
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0

000000c8 <.do_copy_data_start>:
      c8:	aa 37       	cpi	r26, 0x7A	; 122
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <.do_copy_data_loop>

000000ce <__do_clear_bss>:
      ce:	15 e0       	ldi	r17, 0x05	; 5
      d0:	aa e7       	ldi	r26, 0x7A	; 122
      d2:	b3 e0       	ldi	r27, 0x03	; 3
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a0 3d       	cpi	r26, 0xD0	; 208
      da:	b1 07       	cpc	r27, r17
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 41 08 	call	0x1082	; 0x1082 <main>
      e2:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <LCD_write_byte>:

void LCD_write_byte(unsigned char data, unsigned char command)
{
	unsigned char i;
	
	if (command == 1)
      ea:	61 30       	cpi	r22, 0x01	; 1
      ec:	11 f4       	brne	.+4      	; 0xf2 <LCD_write_byte+0x8>
	LCD_DC_low;
      ee:	2d 98       	cbi	0x05, 5	; 5
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <LCD_write_byte+0xa>
	else
	LCD_DC_high;
      f2:	2d 9a       	sbi	0x05, 5	; 5
      f4:	90 e0       	ldi	r25, 0x00	; 0

	for(i=0;i<8;i++)
	{
		if(data&0x80)
      f6:	87 ff       	sbrs	r24, 7
      f8:	02 c0       	rjmp	.+4      	; 0xfe <LCD_write_byte+0x14>
		LCD_SDIN_high;
      fa:	2e 9a       	sbi	0x05, 6	; 5
      fc:	01 c0       	rjmp	.+2      	; 0x100 <LCD_write_byte+0x16>
		else
		LCD_SDIN_low;
      fe:	2e 98       	cbi	0x05, 6	; 5
		LCD_SCLK_low;
     100:	8f 98       	cbi	0x11, 7	; 17
		data = data << 1;
		LCD_SCLK_high;
     102:	8f 9a       	sbi	0x11, 7	; 17
	if (command == 1)
	LCD_DC_low;
	else
	LCD_DC_high;

	for(i=0;i<8;i++)
     104:	9f 5f       	subi	r25, 0xFF	; 255
     106:	98 30       	cpi	r25, 0x08	; 8
     108:	11 f0       	breq	.+4      	; 0x10e <LCD_write_byte+0x24>
		if(data&0x80)
		LCD_SDIN_high;
		else
		LCD_SDIN_low;
		LCD_SCLK_low;
		data = data << 1;
     10a:	88 0f       	add	r24, r24
     10c:	f4 cf       	rjmp	.-24     	; 0xf6 <LCD_write_byte+0xc>
     10e:	08 95       	ret

00000110 <LCD_clear>:
	LCD_write_byte(0x0c, 1);	// set LCD mode,display normally
	LCD_clear();	                // clear the LCD
}

void LCD_clear() 
{
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
	unsigned int i;

	LCD_write_byte(0x0c, 1);
     114:	8c e0       	ldi	r24, 0x0C	; 12
     116:	61 e0       	ldi	r22, 0x01	; 1
     118:	0e 94 75 00 	call	0xea	; 0xea <LCD_write_byte>
	LCD_write_byte(0x80, 1);
     11c:	80 e8       	ldi	r24, 0x80	; 128
     11e:	61 e0       	ldi	r22, 0x01	; 1
     120:	0e 94 75 00 	call	0xea	; 0xea <LCD_write_byte>
     124:	c0 e0       	ldi	r28, 0x00	; 0
     126:	d0 e0       	ldi	r29, 0x00	; 0

	for (i=0; i<504; i++)
	{
		LCD_write_byte(0, 0);
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	60 e0       	ldi	r22, 0x00	; 0
     12c:	0e 94 75 00 	call	0xea	; 0xea <LCD_write_byte>
	unsigned int i;

	LCD_write_byte(0x0c, 1);
	LCD_write_byte(0x80, 1);

	for (i=0; i<504; i++)
     130:	21 96       	adiw	r28, 0x01	; 1
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	c8 3f       	cpi	r28, 0xF8	; 248
     136:	d8 07       	cpc	r29, r24
     138:	b9 f7       	brne	.-18     	; 0x128 <LCD_clear+0x18>
	{
		LCD_write_byte(0, 0);
	}
}
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	08 95       	ret

00000140 <LCD_init>:
	}
}

void LCD_init() 
{
	LCD_SCE_low; //active in low lcd
     140:	5f 98       	cbi	0x0b, 7	; 11

	LCD_RST_low;
     142:	2c 98       	cbi	0x05, 4	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     144:	82 e0       	ldi	r24, 0x02	; 2
     146:	98 2f       	mov	r25, r24
     148:	9a 95       	dec	r25
     14a:	f1 f7       	brne	.-4      	; 0x148 <LCD_init+0x8>
	_delay_us(1);
	LCD_RST_high;
     14c:	2c 9a       	sbi	0x05, 4	; 5
     14e:	8a 95       	dec	r24
     150:	f1 f7       	brne	.-4      	; 0x14e <LCD_init+0xe>

	_delay_us(1);

	LCD_write_byte(0x21, 1);	// set LCD mode
     152:	81 e2       	ldi	r24, 0x21	; 33
     154:	61 e0       	ldi	r22, 0x01	; 1
     156:	0e 94 75 00 	call	0xea	; 0xea <LCD_write_byte>
	LCD_write_byte(0xc8, 1);	// set bias voltage
     15a:	88 ec       	ldi	r24, 0xC8	; 200
     15c:	61 e0       	ldi	r22, 0x01	; 1
     15e:	0e 94 75 00 	call	0xea	; 0xea <LCD_write_byte>
	LCD_write_byte(0x06, 1);	// temperature correction
     162:	86 e0       	ldi	r24, 0x06	; 6
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	0e 94 75 00 	call	0xea	; 0xea <LCD_write_byte>
	LCD_write_byte(0x13, 1);	// 1:48
     16a:	83 e1       	ldi	r24, 0x13	; 19
     16c:	61 e0       	ldi	r22, 0x01	; 1
     16e:	0e 94 75 00 	call	0xea	; 0xea <LCD_write_byte>
	LCD_write_byte(0x20, 1);	// use bias command, vertical
     172:	80 e2       	ldi	r24, 0x20	; 32
     174:	61 e0       	ldi	r22, 0x01	; 1
     176:	0e 94 75 00 	call	0xea	; 0xea <LCD_write_byte>
	LCD_write_byte(0x0c, 1);	// set LCD mode,display normally
     17a:	8c e0       	ldi	r24, 0x0C	; 12
     17c:	61 e0       	ldi	r22, 0x01	; 1
     17e:	0e 94 75 00 	call	0xea	; 0xea <LCD_write_byte>
	LCD_clear();	                // clear the LCD
     182:	0e 94 88 00 	call	0x110	; 0x110 <LCD_clear>
}
     186:	08 95       	ret

00000188 <LCD_gotoXY>:
		LCD_write_byte(0, 0);
	}
}

void LCD_gotoXY(unsigned char x, unsigned char y_col)
{
     188:	1f 93       	push	r17
     18a:	18 2f       	mov	r17, r24
     18c:	86 2f       	mov	r24, r22
	LCD_write_byte(0x40 | y_col, 1);	// column
     18e:	80 64       	ori	r24, 0x40	; 64
     190:	61 e0       	ldi	r22, 0x01	; 1
     192:	0e 94 75 00 	call	0xea	; 0xea <LCD_write_byte>
	LCD_write_byte(0x80 | x, 1);    // row
     196:	81 2f       	mov	r24, r17
     198:	80 68       	ori	r24, 0x80	; 128
     19a:	61 e0       	ldi	r22, 0x01	; 1
     19c:	0e 94 75 00 	call	0xea	; 0xea <LCD_write_byte>
}
     1a0:	1f 91       	pop	r17
     1a2:	08 95       	ret

000001a4 <LCD_write_col>:
#include "lcd_nokia5110.h"



void LCD_write_col(unsigned char x, unsigned char y_col, unsigned char data)
{
     1a4:	1f 93       	push	r17
     1a6:	14 2f       	mov	r17, r20
	unsigned char i;
	
	LCD_gotoXY(x,y_col);
     1a8:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_gotoXY>
	
	LCD_DC_high;		//data
     1ac:	2d 9a       	sbi	0x05, 5	; 5
     1ae:	80 e0       	ldi	r24, 0x00	; 0

	for(i=0;i<8;i++)
	{
		if(data&0x80)
     1b0:	17 ff       	sbrs	r17, 7
     1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <LCD_write_col+0x14>
		LCD_SDIN_high;
     1b4:	2e 9a       	sbi	0x05, 6	; 5
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <LCD_write_col+0x16>
		else
		LCD_SDIN_low;
     1b8:	2e 98       	cbi	0x05, 6	; 5
		LCD_SCLK_low;
     1ba:	8f 98       	cbi	0x11, 7	; 17
		data = data << 1;
		LCD_SCLK_high;
     1bc:	8f 9a       	sbi	0x11, 7	; 17
	
	LCD_gotoXY(x,y_col);
	
	LCD_DC_high;		//data

	for(i=0;i<8;i++)
     1be:	8f 5f       	subi	r24, 0xFF	; 255
     1c0:	88 30       	cpi	r24, 0x08	; 8
     1c2:	11 f0       	breq	.+4      	; 0x1c8 <LCD_write_col+0x24>
		if(data&0x80)
		LCD_SDIN_high;
		else
		LCD_SDIN_low;
		LCD_SCLK_low;
		data = data << 1;
     1c4:	11 0f       	add	r17, r17
     1c6:	f4 cf       	rjmp	.-24     	; 0x1b0 <LCD_write_col+0xc>
		LCD_SCLK_high;
	}
}
     1c8:	1f 91       	pop	r17
     1ca:	08 95       	ret

000001cc <LCD_write_char>:
	LCD_write_byte(0x40 | y_col, 1);	// column
	LCD_write_byte(0x80 | x, 1);    // row
}

void LCD_write_char(unsigned char c)
{
     1cc:	0f 93       	push	r16
     1ce:	1f 93       	push	r17
     1d0:	cf 93       	push	r28
     1d2:	df 93       	push	r29
	unsigned char line;

	c -= 32;
     1d4:	80 52       	subi	r24, 0x20	; 32
     1d6:	26 e0       	ldi	r18, 0x06	; 6
     1d8:	82 9f       	mul	r24, r18
     1da:	80 01       	movw	r16, r0
     1dc:	11 24       	eor	r1, r1
     1de:	05 5b       	subi	r16, 0xB5	; 181
     1e0:	1e 4f       	sbci	r17, 0xFE	; 254

	for (line=0; line<6; line++)
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	01 96       	adiw	r24, 0x01	; 1
     1e6:	ec 01       	movw	r28, r24
     1e8:	cc 0f       	add	r28, r28
     1ea:	dd 1f       	adc	r29, r29
     1ec:	c8 0f       	add	r28, r24
     1ee:	d9 1f       	adc	r29, r25
     1f0:	cc 0f       	add	r28, r28
     1f2:	dd 1f       	adc	r29, r29
     1f4:	c5 5b       	subi	r28, 0xB5	; 181
     1f6:	de 4f       	sbci	r29, 0xFE	; 254
	LCD_write_byte(font6x8[c][line], 0);
     1f8:	f8 01       	movw	r30, r16
     1fa:	81 91       	ld	r24, Z+
     1fc:	8f 01       	movw	r16, r30
     1fe:	60 e0       	ldi	r22, 0x00	; 0
     200:	0e 94 75 00 	call	0xea	; 0xea <LCD_write_byte>
{
	unsigned char line;

	c -= 32;

	for (line=0; line<6; line++)
     204:	0c 17       	cp	r16, r28
     206:	1d 07       	cpc	r17, r29
     208:	b9 f7       	brne	.-18     	; 0x1f8 <LCD_write_char+0x2c>
	LCD_write_byte(font6x8[c][line], 0);
}
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	1f 91       	pop	r17
     210:	0f 91       	pop	r16
     212:	08 95       	ret

00000214 <LCD_write_string>:

void LCD_write_string(char *s)
{
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	ec 01       	movw	r28, r24
     21a:	03 c0       	rjmp	.+6      	; 0x222 <LCD_write_string+0xe>
	
	while (*s)
	{
		LCD_write_char(*s);
     21c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_char>
		s++;
     220:	21 96       	adiw	r28, 0x01	; 1
}

void LCD_write_string(char *s)
{
	
	while (*s)
     222:	88 81       	ld	r24, Y
     224:	88 23       	and	r24, r24
     226:	d1 f7       	brne	.-12     	; 0x21c <LCD_write_string+0x8>
	{
		LCD_write_char(*s);
		s++;
	}
}
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	08 95       	ret

0000022e <InitADC>:


//Adc initialize port
void InitADC()
{
	ADMUX = (1<<REFS0);                         			// For Aref=AVcc;
     22e:	80 e4       	ldi	r24, 0x40	; 64
     230:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Rrescalar div factor =128
     234:	87 e8       	ldi	r24, 0x87	; 135
     236:	80 93 7a 00 	sts	0x007A, r24
}
     23a:	08 95       	ret

0000023c <ReadADC>:
//read por adc
uint16_t ReadADC(uint8_t ch)
{
   //Select ADC Channel ch must be 0-7
   ch=ch&0b00000111;
   ADMUX|=ch;
     23c:	90 91 7c 00 	lds	r25, 0x007C
     240:	87 70       	andi	r24, 0x07	; 7
     242:	89 2b       	or	r24, r25
     244:	80 93 7c 00 	sts	0x007C, r24

   //Start Single conversion
   ADCSRA|=(1<<ADSC);
     248:	80 91 7a 00 	lds	r24, 0x007A
     24c:	80 64       	ori	r24, 0x40	; 64
     24e:	80 93 7a 00 	sts	0x007A, r24

   //Wait for conversion to complete
   while(!(ADCSRA & (1<<ADIF)));
     252:	80 91 7a 00 	lds	r24, 0x007A
     256:	84 ff       	sbrs	r24, 4
     258:	fc cf       	rjmp	.-8      	; 0x252 <ReadADC+0x16>
   //Clear ADIF by writing one to it
   //Note you may be wondering why we have write one to clear it
   //This is standard way of clearing bits in io as said in datasheets.
   //The code writes '1' but it result in setting bit to '0' !!!

   ADCSRA|=(1<<ADIF);
     25a:	80 91 7a 00 	lds	r24, 0x007A
     25e:	80 61       	ori	r24, 0x10	; 16
     260:	80 93 7a 00 	sts	0x007A, r24
	
	
   return(ADC);
     264:	20 91 78 00 	lds	r18, 0x0078
     268:	30 91 79 00 	lds	r19, 0x0079
}
     26c:	c9 01       	movw	r24, r18
     26e:	08 95       	ret

00000270 <port_ini>:
}

//function ini port input/output
void port_ini()
{
	DDRF = 0b10001110;
     270:	8e e8       	ldi	r24, 0x8E	; 142
     272:	80 bb       	out	0x10, r24	; 16
	DDRB = 0x7c;
     274:	8c e7       	ldi	r24, 0x7C	; 124
     276:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xfc;
     278:	8c ef       	ldi	r24, 0xFC	; 252
     27a:	8a b9       	out	0x0a, r24	; 10

}
     27c:	08 95       	ret

0000027e <initial_message>:

//function show ini message
void initial_message()
{

	LCD_gotoXY(0,0);
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	60 e0       	ldi	r22, 0x00	; 0
     282:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_gotoXY>
	LCD_write_string("**WEllcome** ");
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_write_string>
	
	LCD_gotoXY(0,1);
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	61 e0       	ldi	r22, 0x01	; 1
     292:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_gotoXY>
	LCD_write_string(" Snake Game ");
     296:	8e e0       	ldi	r24, 0x0E	; 14
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_write_string>
	
	LCD_gotoXY(0,3);
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	63 e0       	ldi	r22, 0x03	; 3
     2a2:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_gotoXY>
	LCD_write_string(" Hatim Daniel");
     2a6:	8b e1       	ldi	r24, 0x1B	; 27
     2a8:	91 e0       	ldi	r25, 0x01	; 1
     2aa:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_write_string>
	
	
	LCD_gotoXY(0,4);
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	64 e0       	ldi	r22, 0x04	; 4
     2b2:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_gotoXY>
	LCD_write_string(" ID: N8779333 ");
     2b6:	89 e2       	ldi	r24, 0x29	; 41
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_write_string>
	
	
}
     2be:	08 95       	ret

000002c0 <draw_score>:

//function show score
void draw_score()			
{

	score = score + 1 + lines_walls;
     2c0:	90 91 83 03 	lds	r25, 0x0383
     2c4:	80 91 8a 03 	lds	r24, 0x038A
     2c8:	89 0f       	add	r24, r25
     2ca:	8f 5f       	subi	r24, 0xFF	; 255
     2cc:	80 93 8a 03 	sts	0x038A, r24


	if ((score < 10) || (score >10))
     2d0:	8a 30       	cpi	r24, 0x0A	; 10
     2d2:	39 f0       	breq	.+14     	; 0x2e2 <draw_score+0x22>
	{
		score_uni = score_uni + 1 + lines_walls;
     2d4:	80 91 88 03 	lds	r24, 0x0388
     2d8:	98 0f       	add	r25, r24
     2da:	9f 5f       	subi	r25, 0xFF	; 255
     2dc:	90 93 88 03 	sts	0x0388, r25
     2e0:	05 c0       	rjmp	.+10     	; 0x2ec <draw_score+0x2c>
		
	}	
	else if  (score == 10)
	{
		
		score_uni = 0;
     2e2:	10 92 88 03 	sts	0x0388, r1
		score_ten = 1;
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	80 93 89 03 	sts	0x0389, r24
	}
			
	LCD_gotoXY(0,0);
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	60 e0       	ldi	r22, 0x00	; 0
     2f0:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_gotoXY>
	LCD_write_char(score_ten + 0x30); //ten score
     2f4:	80 91 89 03 	lds	r24, 0x0389
     2f8:	80 5d       	subi	r24, 0xD0	; 208
     2fa:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_char>
	LCD_write_char(score_uni + 0x30); //unid score
     2fe:	80 91 88 03 	lds	r24, 0x0388
     302:	80 5d       	subi	r24, 0xD0	; 208
     304:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_char>

}
     308:	08 95       	ret

0000030a <check_adc>:

//function check adc if modified
void check_adc()
{

	if (ReadADC(0) < 250)
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	0e 94 1e 01 	call	0x23c	; 0x23c <ReadADC>
     310:	8a 3f       	cpi	r24, 0xFA	; 250
     312:	91 05       	cpc	r25, r1
     314:	18 f4       	brcc	.+6      	; 0x31c <check_adc+0x12>
	{
		
		delay_game = 100;
     316:	84 e6       	ldi	r24, 0x64	; 100
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	11 c0       	rjmp	.+34     	; 0x33e <check_adc+0x34>
	}
	else if (ReadADC(0) < 512)
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	0e 94 1e 01 	call	0x23c	; 0x23c <ReadADC>
     322:	80 50       	subi	r24, 0x00	; 0
     324:	92 40       	sbci	r25, 0x02	; 2
     326:	18 f4       	brcc	.+6      	; 0x32e <check_adc+0x24>
	{
		delay_game = 200;
     328:	88 ec       	ldi	r24, 0xC8	; 200
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	08 c0       	rjmp	.+16     	; 0x33e <check_adc+0x34>
	}
	else if (ReadADC(0) < 750)
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	0e 94 1e 01 	call	0x23c	; 0x23c <ReadADC>
     334:	8e 5e       	subi	r24, 0xEE	; 238
     336:	92 40       	sbci	r25, 0x02	; 2
     338:	38 f4       	brcc	.+14     	; 0x348 <check_adc+0x3e>
	{
		
		delay_game = 500;
     33a:	84 ef       	ldi	r24, 0xF4	; 244
     33c:	91 e0       	ldi	r25, 0x01	; 1
     33e:	90 93 82 03 	sts	0x0382, r25
     342:	80 93 81 03 	sts	0x0381, r24
     346:	08 95       	ret
	}	
	else if (ReadADC(0) < 1024)
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	0e 94 1e 01 	call	0x23c	; 0x23c <ReadADC>
     34e:	80 50       	subi	r24, 0x00	; 0
     350:	94 40       	sbci	r25, 0x04	; 4
     352:	30 f4       	brcc	.+12     	; 0x360 <check_adc+0x56>
	{
		
		delay_game = 800;
     354:	80 e2       	ldi	r24, 0x20	; 32
     356:	93 e0       	ldi	r25, 0x03	; 3
     358:	90 93 82 03 	sts	0x0382, r25
     35c:	80 93 81 03 	sts	0x0381, r24
     360:	08 95       	ret

00000362 <LCD_delete_sprite>:
}


//function delete one sprite
void LCD_delete_sprite(unsigned char x_3, unsigned char y_3)
{
     362:	6f 92       	push	r6
     364:	7f 92       	push	r7
     366:	8f 92       	push	r8
     368:	9f 92       	push	r9
     36a:	af 92       	push	r10
     36c:	bf 92       	push	r11
     36e:	cf 92       	push	r12
     370:	df 92       	push	r13
     372:	ef 92       	push	r14
     374:	ff 92       	push	r15
     376:	0f 93       	push	r16
     378:	1f 93       	push	r17
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
	unsigned char X_84;
	unsigned char y_48;
	unsigned char dato_col;
	
	
	X_84 = x_3 * 3 -1;
     37e:	93 e0       	ldi	r25, 0x03	; 3
     380:	89 9f       	mul	r24, r25
     382:	a0 01       	movw	r20, r0
     384:	11 24       	eor	r1, r1
     386:	64 2e       	mov	r6, r20
     388:	6a 94       	dec	r6
	y_48 = trunc((y_3 -1)* 3 / 8) ;

	if ((y_3 == 3) || (y_3 == 6) || (y_3 == 11) || (y_3 == 14)) 
     38a:	63 30       	cpi	r22, 0x03	; 3
     38c:	51 f0       	breq	.+20     	; 0x3a2 <LCD_delete_sprite+0x40>
     38e:	66 30       	cpi	r22, 0x06	; 6
     390:	09 f4       	brne	.+2      	; 0x394 <LCD_delete_sprite+0x32>
     392:	6b c0       	rjmp	.+214    	; 0x46a <LCD_delete_sprite+0x108>
     394:	6b 30       	cpi	r22, 0x0B	; 11
     396:	09 f4       	brne	.+2      	; 0x39a <LCD_delete_sprite+0x38>
     398:	dc c0       	rjmp	.+440    	; 0x552 <LCD_delete_sprite+0x1f0>
     39a:	6e 30       	cpi	r22, 0x0E	; 14
     39c:	09 f0       	breq	.+2      	; 0x3a0 <LCD_delete_sprite+0x3e>
     39e:	a1 c1       	rjmp	.+834    	; 0x6e2 <LCD_delete_sprite+0x380>
     3a0:	3c c1       	rjmp	.+632    	; 0x61a <LCD_delete_sprite+0x2b8>
		
		switch(y_3)
		{
			case 3:
				
				LcdCache [ X_84 -2][ 0] = ~0xc0 & LcdCache [ X_84 -2][ 0];
     3a2:	26 2d       	mov	r18, r6
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	c9 01       	movw	r24, r18
     3a8:	02 97       	sbiw	r24, 0x02	; 2
     3aa:	6c 01       	movw	r12, r24
     3ac:	cc 0c       	add	r12, r12
     3ae:	dd 1c       	adc	r13, r13
     3b0:	c8 0e       	add	r12, r24
     3b2:	d9 1e       	adc	r13, r25
     3b4:	cc 0c       	add	r12, r12
     3b6:	dd 1c       	adc	r13, r13
     3b8:	81 e9       	ldi	r24, 0x91	; 145
     3ba:	93 e0       	ldi	r25, 0x03	; 3
     3bc:	c8 0e       	add	r12, r24
     3be:	d9 1e       	adc	r13, r25
     3c0:	e6 01       	movw	r28, r12
     3c2:	88 81       	ld	r24, Y
     3c4:	8f 73       	andi	r24, 0x3F	; 63
     3c6:	88 83       	st	Y, r24
				LcdCache [ X_84 -1][ 0] = ~0xc0 & LcdCache [ X_84 -1][ 0];
     3c8:	c9 01       	movw	r24, r18
     3ca:	01 97       	sbiw	r24, 0x01	; 1
     3cc:	7c 01       	movw	r14, r24
     3ce:	ee 0c       	add	r14, r14
     3d0:	ff 1c       	adc	r15, r15
     3d2:	e8 0e       	add	r14, r24
     3d4:	f9 1e       	adc	r15, r25
     3d6:	ee 0c       	add	r14, r14
     3d8:	ff 1c       	adc	r15, r15
     3da:	e1 e9       	ldi	r30, 0x91	; 145
     3dc:	f3 e0       	ldi	r31, 0x03	; 3
     3de:	ee 0e       	add	r14, r30
     3e0:	ff 1e       	adc	r15, r31
     3e2:	e7 01       	movw	r28, r14
     3e4:	88 81       	ld	r24, Y
     3e6:	8f 73       	andi	r24, 0x3F	; 63
     3e8:	88 83       	st	Y, r24
				LcdCache [ X_84   ][ 0] = ~0xc0 & LcdCache [ X_84   ][ 0];
     3ea:	89 01       	movw	r16, r18
     3ec:	00 0f       	add	r16, r16
     3ee:	11 1f       	adc	r17, r17
     3f0:	02 0f       	add	r16, r18
     3f2:	13 1f       	adc	r17, r19
     3f4:	00 0f       	add	r16, r16
     3f6:	11 1f       	adc	r17, r17
     3f8:	0e 0f       	add	r16, r30
     3fa:	1f 1f       	adc	r17, r31
     3fc:	f8 01       	movw	r30, r16
     3fe:	80 81       	ld	r24, Z
     400:	8f 73       	andi	r24, 0x3F	; 63
     402:	80 83       	st	Z, r24
				
				LcdCache [ X_84 -2][ 1] = ~0x01 & LcdCache [ X_84 -2][ 1];
     404:	e6 01       	movw	r28, r12
     406:	89 81       	ldd	r24, Y+1	; 0x01
     408:	8e 7f       	andi	r24, 0xFE	; 254
     40a:	89 83       	std	Y+1, r24	; 0x01
				LcdCache [ X_84 -1][ 1] = ~0x01 & LcdCache [ X_84 -1][ 1];
     40c:	f7 01       	movw	r30, r14
     40e:	81 81       	ldd	r24, Z+1	; 0x01
     410:	8e 7f       	andi	r24, 0xFE	; 254
     412:	81 83       	std	Z+1, r24	; 0x01
				LcdCache [ X_84   ][ 1] = ~0x01 & LcdCache [ X_84   ][ 1];
     414:	e8 01       	movw	r28, r16
     416:	b9 80       	ldd	r11, Y+1	; 0x01
     418:	ee ef       	ldi	r30, 0xFE	; 254
     41a:	be 22       	and	r11, r30
     41c:	b9 82       	std	Y+1, r11	; 0x01
				
				
				LCD_write_col(X_84 -2 , 0, LcdCache [ X_84 -2][ 0]);
     41e:	bd ef       	ldi	r27, 0xFD	; 253
     420:	9b 2e       	mov	r9, r27
     422:	94 0e       	add	r9, r20
     424:	89 2d       	mov	r24, r9
     426:	60 e0       	ldi	r22, 0x00	; 0
     428:	e6 01       	movw	r28, r12
     42a:	48 81       	ld	r20, Y
     42c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				LCD_write_col(X_84 -1 , 0, LcdCache [ X_84 -1][ 0]);
     430:	a6 2c       	mov	r10, r6
     432:	aa 94       	dec	r10
     434:	8a 2d       	mov	r24, r10
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	f7 01       	movw	r30, r14
     43a:	40 81       	ld	r20, Z
     43c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				LCD_write_col(X_84    , 0, LcdCache [ X_84   ][ 0]);
     440:	86 2d       	mov	r24, r6
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	e8 01       	movw	r28, r16
     446:	48 81       	ld	r20, Y
     448:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				
				LCD_write_col(X_84 -2 , 1, LcdCache [ X_84 -2][ 1]);
     44c:	89 2d       	mov	r24, r9
     44e:	61 e0       	ldi	r22, 0x01	; 1
     450:	f6 01       	movw	r30, r12
     452:	41 81       	ldd	r20, Z+1	; 0x01
     454:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				LCD_write_col(X_84 -1 , 1, LcdCache [ X_84 -1][ 1]);
     458:	8a 2d       	mov	r24, r10
     45a:	61 e0       	ldi	r22, 0x01	; 1
     45c:	e7 01       	movw	r28, r14
     45e:	49 81       	ldd	r20, Y+1	; 0x01
     460:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				LCD_write_col(X_84    , 1, LcdCache [ X_84   ][ 1]);	
     464:	86 2d       	mov	r24, r6
     466:	61 e0       	ldi	r22, 0x01	; 1
     468:	3a c1       	rjmp	.+628    	; 0x6de <LCD_delete_sprite+0x37c>
				
				
				break;
			case 6:	
			
				LcdCache [ X_84 -2][ 1] = ~0x80 & LcdCache [ X_84 -2][ 1];
     46a:	26 2d       	mov	r18, r6
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	c9 01       	movw	r24, r18
     470:	02 97       	sbiw	r24, 0x02	; 2
     472:	7c 01       	movw	r14, r24
     474:	ee 0c       	add	r14, r14
     476:	ff 1c       	adc	r15, r15
     478:	e8 0e       	add	r14, r24
     47a:	f9 1e       	adc	r15, r25
     47c:	ee 0c       	add	r14, r14
     47e:	ff 1c       	adc	r15, r15
     480:	d7 01       	movw	r26, r14
     482:	af 56       	subi	r26, 0x6F	; 111
     484:	bc 4f       	sbci	r27, 0xFC	; 252
     486:	11 96       	adiw	r26, 0x01	; 1
     488:	8c 91       	ld	r24, X
     48a:	11 97       	sbiw	r26, 0x01	; 1
     48c:	8f 77       	andi	r24, 0x7F	; 127
     48e:	11 96       	adiw	r26, 0x01	; 1
     490:	8c 93       	st	X, r24
     492:	11 97       	sbiw	r26, 0x01	; 1
				LcdCache [ X_84 -1][ 1] = ~0x80 & LcdCache [ X_84 -1][ 1];
     494:	c9 01       	movw	r24, r18
     496:	01 97       	sbiw	r24, 0x01	; 1
     498:	8c 01       	movw	r16, r24
     49a:	00 0f       	add	r16, r16
     49c:	11 1f       	adc	r17, r17
     49e:	08 0f       	add	r16, r24
     4a0:	19 1f       	adc	r17, r25
     4a2:	00 0f       	add	r16, r16
     4a4:	11 1f       	adc	r17, r17
     4a6:	61 e9       	ldi	r22, 0x91	; 145
     4a8:	a6 2e       	mov	r10, r22
     4aa:	63 e0       	ldi	r22, 0x03	; 3
     4ac:	b6 2e       	mov	r11, r22
     4ae:	a0 0e       	add	r10, r16
     4b0:	b1 1e       	adc	r11, r17
     4b2:	f5 01       	movw	r30, r10
     4b4:	81 81       	ldd	r24, Z+1	; 0x01
     4b6:	8f 77       	andi	r24, 0x7F	; 127
     4b8:	81 83       	std	Z+1, r24	; 0x01
				LcdCache [ X_84   ][ 1] = ~0x80 & LcdCache [ X_84   ][ 1];
     4ba:	f9 01       	movw	r30, r18
     4bc:	ee 0f       	add	r30, r30
     4be:	ff 1f       	adc	r31, r31
     4c0:	e2 0f       	add	r30, r18
     4c2:	f3 1f       	adc	r31, r19
     4c4:	ee 0f       	add	r30, r30
     4c6:	ff 1f       	adc	r31, r31
     4c8:	21 e9       	ldi	r18, 0x91	; 145
     4ca:	c2 2e       	mov	r12, r18
     4cc:	23 e0       	ldi	r18, 0x03	; 3
     4ce:	d2 2e       	mov	r13, r18
     4d0:	ce 0e       	add	r12, r30
     4d2:	df 1e       	adc	r13, r31
     4d4:	e6 01       	movw	r28, r12
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	8f 77       	andi	r24, 0x7F	; 127
     4da:	89 83       	std	Y+1, r24	; 0x01
				
				LcdCache [ X_84 -2][ 2] = ~0x03 & LcdCache [ X_84 -2][ 2];
     4dc:	83 e9       	ldi	r24, 0x93	; 147
     4de:	93 e0       	ldi	r25, 0x03	; 3
     4e0:	e8 0e       	add	r14, r24
     4e2:	f9 1e       	adc	r15, r25
     4e4:	e7 01       	movw	r28, r14
     4e6:	88 81       	ld	r24, Y
     4e8:	8c 7f       	andi	r24, 0xFC	; 252
     4ea:	88 83       	st	Y, r24
				LcdCache [ X_84 -1][ 2] = ~0x03 & LcdCache [ X_84 -1][ 2];
     4ec:	0d 56       	subi	r16, 0x6D	; 109
     4ee:	1c 4f       	sbci	r17, 0xFC	; 252
     4f0:	e8 01       	movw	r28, r16
     4f2:	88 81       	ld	r24, Y
     4f4:	8c 7f       	andi	r24, 0xFC	; 252
     4f6:	88 83       	st	Y, r24
				LcdCache [ X_84   ][ 2] = ~0x03 & LcdCache [ X_84   ][ 2];		
     4f8:	ed 56       	subi	r30, 0x6D	; 109
     4fa:	fc 4f       	sbci	r31, 0xFC	; 252
     4fc:	90 80       	ld	r9, Z
     4fe:	8c ef       	ldi	r24, 0xFC	; 252
     500:	98 22       	and	r9, r24
     502:	90 82       	st	Z, r9
			
			
			
				LCD_write_col(X_84 -2 , 1,LcdCache [ X_84 -2][ 1]);
     504:	6d ef       	ldi	r22, 0xFD	; 253
     506:	76 2e       	mov	r7, r22
     508:	74 0e       	add	r7, r20
     50a:	87 2d       	mov	r24, r7
     50c:	61 e0       	ldi	r22, 0x01	; 1
     50e:	11 96       	adiw	r26, 0x01	; 1
     510:	4c 91       	ld	r20, X
     512:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				LCD_write_col(X_84 -1 , 1,LcdCache [ X_84 -1][ 1]);
     516:	86 2c       	mov	r8, r6
     518:	8a 94       	dec	r8
     51a:	88 2d       	mov	r24, r8
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	e5 01       	movw	r28, r10
     520:	49 81       	ldd	r20, Y+1	; 0x01
     522:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				LCD_write_col(X_84    , 1,LcdCache [ X_84   ][ 1]);
     526:	86 2d       	mov	r24, r6
     528:	61 e0       	ldi	r22, 0x01	; 1
     52a:	f6 01       	movw	r30, r12
     52c:	41 81       	ldd	r20, Z+1	; 0x01
     52e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				
				LCD_write_col(X_84 -2 , 2, LcdCache [ X_84 -2][ 2]);
     532:	87 2d       	mov	r24, r7
     534:	62 e0       	ldi	r22, 0x02	; 2
     536:	e7 01       	movw	r28, r14
     538:	48 81       	ld	r20, Y
     53a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				LCD_write_col(X_84 -1 , 2, LcdCache [ X_84 -1][ 2]);
     53e:	88 2d       	mov	r24, r8
     540:	62 e0       	ldi	r22, 0x02	; 2
     542:	f8 01       	movw	r30, r16
     544:	40 81       	ld	r20, Z
     546:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				LCD_write_col(X_84    , 2, LcdCache [ X_84   ][ 2]);			
     54a:	86 2d       	mov	r24, r6
     54c:	62 e0       	ldi	r22, 0x02	; 2
     54e:	49 2d       	mov	r20, r9
     550:	2e c1       	rjmp	.+604    	; 0x7ae <LCD_delete_sprite+0x44c>
				break;
			case 11:	
			
				LcdCache [ X_84 -2][ 3] = ~0xc0 & LcdCache [ X_84 -2][ 3];
     552:	26 2d       	mov	r18, r6
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	c9 01       	movw	r24, r18
     558:	02 97       	sbiw	r24, 0x02	; 2
     55a:	6c 01       	movw	r12, r24
     55c:	cc 0c       	add	r12, r12
     55e:	dd 1c       	adc	r13, r13
     560:	c8 0e       	add	r12, r24
     562:	d9 1e       	adc	r13, r25
     564:	cc 0c       	add	r12, r12
     566:	dd 1c       	adc	r13, r13
     568:	81 e9       	ldi	r24, 0x91	; 145
     56a:	93 e0       	ldi	r25, 0x03	; 3
     56c:	c8 0e       	add	r12, r24
     56e:	d9 1e       	adc	r13, r25
     570:	e6 01       	movw	r28, r12
     572:	8b 81       	ldd	r24, Y+3	; 0x03
     574:	8f 73       	andi	r24, 0x3F	; 63
     576:	8b 83       	std	Y+3, r24	; 0x03
				LcdCache [ X_84 -1][ 3] = ~0xc0 & LcdCache [ X_84 -1][ 3];
     578:	c9 01       	movw	r24, r18
     57a:	01 97       	sbiw	r24, 0x01	; 1
     57c:	7c 01       	movw	r14, r24
     57e:	ee 0c       	add	r14, r14
     580:	ff 1c       	adc	r15, r15
     582:	e8 0e       	add	r14, r24
     584:	f9 1e       	adc	r15, r25
     586:	ee 0c       	add	r14, r14
     588:	ff 1c       	adc	r15, r15
     58a:	e1 e9       	ldi	r30, 0x91	; 145
     58c:	f3 e0       	ldi	r31, 0x03	; 3
     58e:	ee 0e       	add	r14, r30
     590:	ff 1e       	adc	r15, r31
     592:	e7 01       	movw	r28, r14
     594:	8b 81       	ldd	r24, Y+3	; 0x03
     596:	8f 73       	andi	r24, 0x3F	; 63
     598:	8b 83       	std	Y+3, r24	; 0x03
				LcdCache [ X_84   ][ 3] = ~0xc0 & LcdCache [ X_84   ][ 3];
     59a:	89 01       	movw	r16, r18
     59c:	00 0f       	add	r16, r16
     59e:	11 1f       	adc	r17, r17
     5a0:	02 0f       	add	r16, r18
     5a2:	13 1f       	adc	r17, r19
     5a4:	00 0f       	add	r16, r16
     5a6:	11 1f       	adc	r17, r17
     5a8:	0e 0f       	add	r16, r30
     5aa:	1f 1f       	adc	r17, r31
     5ac:	f8 01       	movw	r30, r16
     5ae:	83 81       	ldd	r24, Z+3	; 0x03
     5b0:	8f 73       	andi	r24, 0x3F	; 63
     5b2:	83 83       	std	Z+3, r24	; 0x03
				
				LcdCache [ X_84 -2][ 4] = ~0x01 & LcdCache [ X_84 -2][ 4];
     5b4:	e6 01       	movw	r28, r12
     5b6:	8c 81       	ldd	r24, Y+4	; 0x04
     5b8:	8e 7f       	andi	r24, 0xFE	; 254
     5ba:	8c 83       	std	Y+4, r24	; 0x04
				LcdCache [ X_84 -1][ 4] = ~0x01 & LcdCache [ X_84 -1][ 4];
     5bc:	f7 01       	movw	r30, r14
     5be:	84 81       	ldd	r24, Z+4	; 0x04
     5c0:	8e 7f       	andi	r24, 0xFE	; 254
     5c2:	84 83       	std	Z+4, r24	; 0x04
				LcdCache [ X_84   ][ 4] = ~0x01 & LcdCache [ X_84   ][ 4];				
     5c4:	e8 01       	movw	r28, r16
     5c6:	bc 80       	ldd	r11, Y+4	; 0x04
     5c8:	ee ef       	ldi	r30, 0xFE	; 254
     5ca:	be 22       	and	r11, r30
     5cc:	bc 82       	std	Y+4, r11	; 0x04
			
				LCD_write_col(X_84 -2 , 3,LcdCache [ X_84 -2][ 3] );
     5ce:	fd ef       	ldi	r31, 0xFD	; 253
     5d0:	9f 2e       	mov	r9, r31
     5d2:	94 0e       	add	r9, r20
     5d4:	89 2d       	mov	r24, r9
     5d6:	63 e0       	ldi	r22, 0x03	; 3
     5d8:	e6 01       	movw	r28, r12
     5da:	4b 81       	ldd	r20, Y+3	; 0x03
     5dc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				LCD_write_col(X_84 -1 , 3,LcdCache [ X_84 -1][ 3] );
     5e0:	a6 2c       	mov	r10, r6
     5e2:	aa 94       	dec	r10
     5e4:	8a 2d       	mov	r24, r10
     5e6:	63 e0       	ldi	r22, 0x03	; 3
     5e8:	f7 01       	movw	r30, r14
     5ea:	43 81       	ldd	r20, Z+3	; 0x03
     5ec:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				LCD_write_col(X_84    , 3,LcdCache [ X_84   ][ 3] );
     5f0:	86 2d       	mov	r24, r6
     5f2:	63 e0       	ldi	r22, 0x03	; 3
     5f4:	e8 01       	movw	r28, r16
     5f6:	4b 81       	ldd	r20, Y+3	; 0x03
     5f8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				
				LCD_write_col(X_84 -2 , 4, LcdCache [ X_84 -2][ 4]);
     5fc:	89 2d       	mov	r24, r9
     5fe:	64 e0       	ldi	r22, 0x04	; 4
     600:	f6 01       	movw	r30, r12
     602:	44 81       	ldd	r20, Z+4	; 0x04
     604:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				LCD_write_col(X_84 -1 , 4, LcdCache [ X_84 -1][ 4]);
     608:	8a 2d       	mov	r24, r10
     60a:	64 e0       	ldi	r22, 0x04	; 4
     60c:	e7 01       	movw	r28, r14
     60e:	4c 81       	ldd	r20, Y+4	; 0x04
     610:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				LCD_write_col(X_84    , 4, LcdCache [ X_84   ][ 4]);				
     614:	86 2d       	mov	r24, r6
     616:	64 e0       	ldi	r22, 0x04	; 4
     618:	62 c0       	rjmp	.+196    	; 0x6de <LCD_delete_sprite+0x37c>
				break;
			case 14:	
			
				LcdCache [ X_84 -2][ 4] = ~0x80 & LcdCache [ X_84 -2][ 4];
     61a:	26 2d       	mov	r18, r6
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	c9 01       	movw	r24, r18
     620:	02 97       	sbiw	r24, 0x02	; 2
     622:	6c 01       	movw	r12, r24
     624:	cc 0c       	add	r12, r12
     626:	dd 1c       	adc	r13, r13
     628:	c8 0e       	add	r12, r24
     62a:	d9 1e       	adc	r13, r25
     62c:	cc 0c       	add	r12, r12
     62e:	dd 1c       	adc	r13, r13
     630:	e1 e9       	ldi	r30, 0x91	; 145
     632:	f3 e0       	ldi	r31, 0x03	; 3
     634:	ce 0e       	add	r12, r30
     636:	df 1e       	adc	r13, r31
     638:	e6 01       	movw	r28, r12
     63a:	8c 81       	ldd	r24, Y+4	; 0x04
     63c:	8f 77       	andi	r24, 0x7F	; 127
     63e:	8c 83       	std	Y+4, r24	; 0x04
				LcdCache [ X_84 -1][ 4] = ~0x80 & LcdCache [ X_84 -1][ 4];
     640:	c9 01       	movw	r24, r18
     642:	01 97       	sbiw	r24, 0x01	; 1
     644:	7c 01       	movw	r14, r24
     646:	ee 0c       	add	r14, r14
     648:	ff 1c       	adc	r15, r15
     64a:	e8 0e       	add	r14, r24
     64c:	f9 1e       	adc	r15, r25
     64e:	ee 0c       	add	r14, r14
     650:	ff 1c       	adc	r15, r15
     652:	ee 0e       	add	r14, r30
     654:	ff 1e       	adc	r15, r31
     656:	f7 01       	movw	r30, r14
     658:	84 81       	ldd	r24, Z+4	; 0x04
     65a:	8f 77       	andi	r24, 0x7F	; 127
     65c:	84 83       	std	Z+4, r24	; 0x04
				LcdCache [ X_84   ][ 4] = ~0x80 & LcdCache [ X_84   ][ 4];
     65e:	89 01       	movw	r16, r18
     660:	00 0f       	add	r16, r16
     662:	11 1f       	adc	r17, r17
     664:	02 0f       	add	r16, r18
     666:	13 1f       	adc	r17, r19
     668:	00 0f       	add	r16, r16
     66a:	11 1f       	adc	r17, r17
     66c:	0f 56       	subi	r16, 0x6F	; 111
     66e:	1c 4f       	sbci	r17, 0xFC	; 252
     670:	e8 01       	movw	r28, r16
     672:	8c 81       	ldd	r24, Y+4	; 0x04
     674:	8f 77       	andi	r24, 0x7F	; 127
     676:	8c 83       	std	Y+4, r24	; 0x04
				
				LcdCache [ X_84 -2][ 5] = ~0x03 & LcdCache [ X_84 -2][ 5];
     678:	f6 01       	movw	r30, r12
     67a:	85 81       	ldd	r24, Z+5	; 0x05
     67c:	8c 7f       	andi	r24, 0xFC	; 252
     67e:	85 83       	std	Z+5, r24	; 0x05
				LcdCache [ X_84 -1][ 5] = ~0x03 & LcdCache [ X_84 -1][ 5];
     680:	e7 01       	movw	r28, r14
     682:	8d 81       	ldd	r24, Y+5	; 0x05
     684:	8c 7f       	andi	r24, 0xFC	; 252
     686:	8d 83       	std	Y+5, r24	; 0x05
				LcdCache [ X_84   ][ 5] = ~0x03 & LcdCache [ X_84   ][ 5];				
     688:	f8 01       	movw	r30, r16
     68a:	b5 80       	ldd	r11, Z+5	; 0x05
     68c:	fc ef       	ldi	r31, 0xFC	; 252
     68e:	bf 22       	and	r11, r31
     690:	e8 01       	movw	r28, r16
     692:	bd 82       	std	Y+5, r11	; 0x05
			
				LCD_write_col(X_84 -2 , 4, LcdCache [ X_84 -2][ 4]);
     694:	bd ef       	ldi	r27, 0xFD	; 253
     696:	9b 2e       	mov	r9, r27
     698:	94 0e       	add	r9, r20
     69a:	89 2d       	mov	r24, r9
     69c:	64 e0       	ldi	r22, 0x04	; 4
     69e:	f6 01       	movw	r30, r12
     6a0:	44 81       	ldd	r20, Z+4	; 0x04
     6a2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				LCD_write_col(X_84 -1 , 4, LcdCache [ X_84 -1][ 4]);
     6a6:	a6 2c       	mov	r10, r6
     6a8:	aa 94       	dec	r10
     6aa:	8a 2d       	mov	r24, r10
     6ac:	64 e0       	ldi	r22, 0x04	; 4
     6ae:	e7 01       	movw	r28, r14
     6b0:	4c 81       	ldd	r20, Y+4	; 0x04
     6b2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				LCD_write_col(X_84    , 4, LcdCache [ X_84   ][ 4]);
     6b6:	86 2d       	mov	r24, r6
     6b8:	64 e0       	ldi	r22, 0x04	; 4
     6ba:	f8 01       	movw	r30, r16
     6bc:	44 81       	ldd	r20, Z+4	; 0x04
     6be:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				
				LCD_write_col(X_84 -2 , 5, LcdCache [ X_84 -2][ 5]);
     6c2:	89 2d       	mov	r24, r9
     6c4:	65 e0       	ldi	r22, 0x05	; 5
     6c6:	e6 01       	movw	r28, r12
     6c8:	4d 81       	ldd	r20, Y+5	; 0x05
     6ca:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				LCD_write_col(X_84 -1 , 5, LcdCache [ X_84 -1][ 5]);
     6ce:	8a 2d       	mov	r24, r10
     6d0:	65 e0       	ldi	r22, 0x05	; 5
     6d2:	f7 01       	movw	r30, r14
     6d4:	45 81       	ldd	r20, Z+5	; 0x05
     6d6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				LCD_write_col(X_84    , 5, LcdCache [ X_84   ][ 5]);					
     6da:	86 2d       	mov	r24, r6
     6dc:	65 e0       	ldi	r22, 0x05	; 5
     6de:	4b 2d       	mov	r20, r11
     6e0:	66 c0       	rjmp	.+204    	; 0x7ae <LCD_delete_sprite+0x44c>
	unsigned char y_48;
	unsigned char dato_col;
	
	
	X_84 = x_3 * 3 -1;
	y_48 = trunc((y_3 -1)* 3 / 8) ;
     6e2:	69 9f       	mul	r22, r25
     6e4:	80 01       	movw	r16, r0
     6e6:	11 24       	eor	r1, r1
     6e8:	c8 01       	movw	r24, r16
     6ea:	03 97       	sbiw	r24, 0x03	; 3
     6ec:	68 e0       	ldi	r22, 0x08	; 8
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__divmodhi4>
     6f4:	88 27       	eor	r24, r24
     6f6:	77 fd       	sbrc	r23, 7
     6f8:	80 95       	com	r24
     6fa:	98 2f       	mov	r25, r24
     6fc:	0e 94 c5 0c 	call	0x198a	; 0x198a <__floatsisf>
     700:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <trunc>
     704:	0e 94 97 0c 	call	0x192e	; 0x192e <__fixunssfsi>
     708:	e6 2e       	mov	r14, r22
		}
	
	}
	else
	{
		dato_col = y_3 * 3  - 8 * y_48;		
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	cb 01       	movw	r24, r22
     70e:	a3 e0       	ldi	r26, 0x03	; 3
     710:	88 0f       	add	r24, r24
     712:	99 1f       	adc	r25, r25
     714:	aa 95       	dec	r26
     716:	e1 f7       	brne	.-8      	; 0x710 <LCD_delete_sprite+0x3ae>
     718:	08 1b       	sub	r16, r24
		
		if (dato_col ==0)
     71a:	09 f0       	breq	.+2      	; 0x71e <LCD_delete_sprite+0x3bc>
		
		}
		else
		{

			dato_col = dato_col -3; //offset Location
     71c:	03 50       	subi	r16, 0x03	; 3
		}

		LcdCache [ X_84 -2][ y_48] = ~(0x07 << dato_col) & LcdCache [ X_84 -2][ y_48];
     71e:	27 e0       	ldi	r18, 0x07	; 7
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	02 c0       	rjmp	.+4      	; 0x728 <LCD_delete_sprite+0x3c6>
     724:	22 0f       	add	r18, r18
     726:	33 1f       	adc	r19, r19
     728:	0a 95       	dec	r16
     72a:	e2 f7       	brpl	.-8      	; 0x724 <LCD_delete_sprite+0x3c2>
     72c:	20 95       	com	r18
     72e:	46 2d       	mov	r20, r6
     730:	50 e0       	ldi	r21, 0x00	; 0
     732:	ca 01       	movw	r24, r20
     734:	02 97       	sbiw	r24, 0x02	; 2
     736:	dc 01       	movw	r26, r24
     738:	aa 0f       	add	r26, r26
     73a:	bb 1f       	adc	r27, r27
     73c:	a8 0f       	add	r26, r24
     73e:	b9 1f       	adc	r27, r25
     740:	aa 0f       	add	r26, r26
     742:	bb 1f       	adc	r27, r27
     744:	a6 0f       	add	r26, r22
     746:	b7 1f       	adc	r27, r23
     748:	af 56       	subi	r26, 0x6F	; 111
     74a:	bc 4f       	sbci	r27, 0xFC	; 252
     74c:	8c 91       	ld	r24, X
     74e:	82 23       	and	r24, r18
     750:	8c 93       	st	X, r24
		LcdCache [ X_84 -1][ y_48] = ~(0x07 << dato_col) & LcdCache [ X_84 -1][ y_48];
     752:	ca 01       	movw	r24, r20
     754:	01 97       	sbiw	r24, 0x01	; 1
     756:	8c 01       	movw	r16, r24
     758:	00 0f       	add	r16, r16
     75a:	11 1f       	adc	r17, r17
     75c:	08 0f       	add	r16, r24
     75e:	19 1f       	adc	r17, r25
     760:	00 0f       	add	r16, r16
     762:	11 1f       	adc	r17, r17
     764:	06 0f       	add	r16, r22
     766:	17 1f       	adc	r17, r23
     768:	0f 56       	subi	r16, 0x6F	; 111
     76a:	1c 4f       	sbci	r17, 0xFC	; 252
     76c:	e8 01       	movw	r28, r16
     76e:	88 81       	ld	r24, Y
     770:	82 23       	and	r24, r18
     772:	88 83       	st	Y, r24
		LcdCache [ X_84   ][ y_48] = ~(0x07 << dato_col) & LcdCache [ X_84   ][ y_48];
     774:	fa 01       	movw	r30, r20
     776:	ee 0f       	add	r30, r30
     778:	ff 1f       	adc	r31, r31
     77a:	e4 0f       	add	r30, r20
     77c:	f5 1f       	adc	r31, r21
     77e:	ee 0f       	add	r30, r30
     780:	ff 1f       	adc	r31, r31
     782:	e6 0f       	add	r30, r22
     784:	f7 1f       	adc	r31, r23
     786:	ef 56       	subi	r30, 0x6F	; 111
     788:	fc 4f       	sbci	r31, 0xFC	; 252
     78a:	f0 80       	ld	r15, Z
     78c:	f2 22       	and	r15, r18
     78e:	f0 82       	st	Z, r15
				
		LCD_write_col(X_84 -2 , y_48,LcdCache [ X_84 -2][ y_48]);
     790:	86 2d       	mov	r24, r6
     792:	82 50       	subi	r24, 0x02	; 2
     794:	6e 2d       	mov	r22, r14
     796:	4c 91       	ld	r20, X
     798:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
		LCD_write_col(X_84 -1 , y_48,LcdCache [ X_84 -1][ y_48]);
     79c:	86 2d       	mov	r24, r6
     79e:	81 50       	subi	r24, 0x01	; 1
     7a0:	6e 2d       	mov	r22, r14
     7a2:	48 81       	ld	r20, Y
     7a4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
		LCD_write_col(X_84    , y_48,LcdCache [ X_84   ][ y_48]);
     7a8:	86 2d       	mov	r24, r6
     7aa:	6e 2d       	mov	r22, r14
     7ac:	4f 2d       	mov	r20, r15
     7ae:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
		
		
	}


}
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	1f 91       	pop	r17
     7b8:	0f 91       	pop	r16
     7ba:	ff 90       	pop	r15
     7bc:	ef 90       	pop	r14
     7be:	df 90       	pop	r13
     7c0:	cf 90       	pop	r12
     7c2:	bf 90       	pop	r11
     7c4:	af 90       	pop	r10
     7c6:	9f 90       	pop	r9
     7c8:	8f 90       	pop	r8
     7ca:	7f 90       	pop	r7
     7cc:	6f 90       	pop	r6
     7ce:	08 95       	ret

000007d0 <LCD_delete_hline>:

}

//function delete horizontal line
void LCD_delete_hline(unsigned char x_3, unsigned char y_3)
{
     7d0:	6f 92       	push	r6
     7d2:	7f 92       	push	r7
     7d4:	9f 92       	push	r9
     7d6:	af 92       	push	r10
     7d8:	bf 92       	push	r11
     7da:	cf 92       	push	r12
     7dc:	df 92       	push	r13
     7de:	ef 92       	push	r14
     7e0:	ff 92       	push	r15
     7e2:	0f 93       	push	r16
     7e4:	1f 93       	push	r17
	unsigned char X_84;
	unsigned char y_48;
	unsigned char dato_col;
	
	
	X_84 = x_3 * 3;
     7e6:	93 e0       	ldi	r25, 0x03	; 3
     7e8:	89 9f       	mul	r24, r25
     7ea:	30 01       	movw	r6, r0
     7ec:	11 24       	eor	r1, r1
	y_48 = trunc(y_3 * 3 / 8) ;
     7ee:	69 9f       	mul	r22, r25
     7f0:	80 01       	movw	r16, r0
     7f2:	11 24       	eor	r1, r1
     7f4:	b8 01       	movw	r22, r16
     7f6:	33 e0       	ldi	r19, 0x03	; 3
     7f8:	75 95       	asr	r23
     7fa:	67 95       	ror	r22
     7fc:	3a 95       	dec	r19
     7fe:	e1 f7       	brne	.-8      	; 0x7f8 <LCD_delete_hline+0x28>
     800:	88 27       	eor	r24, r24
     802:	77 fd       	sbrc	r23, 7
     804:	80 95       	com	r24
     806:	98 2f       	mov	r25, r24
     808:	0e 94 c5 0c 	call	0x198a	; 0x198a <__floatsisf>
     80c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <trunc>
     810:	0e 94 97 0c 	call	0x192e	; 0x192e <__fixunssfsi>
     814:	6b 01       	movw	r12, r22
     816:	7c 01       	movw	r14, r24


	
		dato_col = y_3 * 3  - 8 * y_48;		
     818:	a6 2e       	mov	r10, r22
     81a:	bb 24       	eor	r11, r11


		LcdCache [ X_84 -2][ y_48] = ~(0x40 >> (8 - dato_col)) & LcdCache [ X_84 -2][ y_48];
     81c:	c5 01       	movw	r24, r10
     81e:	23 e0       	ldi	r18, 0x03	; 3
     820:	88 0f       	add	r24, r24
     822:	99 1f       	adc	r25, r25
     824:	2a 95       	dec	r18
     826:	e1 f7       	brne	.-8      	; 0x820 <LCD_delete_hline+0x50>
     828:	08 1b       	sub	r16, r24
     82a:	88 e0       	ldi	r24, 0x08	; 8
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	80 1b       	sub	r24, r16
     830:	91 09       	sbc	r25, r1
     832:	20 e4       	ldi	r18, 0x40	; 64
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	02 c0       	rjmp	.+4      	; 0x83c <LCD_delete_hline+0x6c>
     838:	35 95       	asr	r19
     83a:	27 95       	ror	r18
     83c:	8a 95       	dec	r24
     83e:	e2 f7       	brpl	.-8      	; 0x838 <LCD_delete_hline+0x68>
     840:	20 95       	com	r18
     842:	46 2d       	mov	r20, r6
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	ca 01       	movw	r24, r20
     848:	02 97       	sbiw	r24, 0x02	; 2
     84a:	61 e9       	ldi	r22, 0x91	; 145
     84c:	73 e0       	ldi	r23, 0x03	; 3
     84e:	dc 01       	movw	r26, r24
     850:	aa 0f       	add	r26, r26
     852:	bb 1f       	adc	r27, r27
     854:	a8 0f       	add	r26, r24
     856:	b9 1f       	adc	r27, r25
     858:	aa 0f       	add	r26, r26
     85a:	bb 1f       	adc	r27, r27
     85c:	aa 0d       	add	r26, r10
     85e:	bb 1d       	adc	r27, r11
     860:	a6 0f       	add	r26, r22
     862:	b7 1f       	adc	r27, r23
     864:	8c 91       	ld	r24, X
     866:	82 23       	and	r24, r18
     868:	8c 93       	st	X, r24
		LcdCache [ X_84 -1][ y_48] = ~(0x40 >> (8 - dato_col)) & LcdCache [ X_84 -1][ y_48];
     86a:	ca 01       	movw	r24, r20
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	8c 01       	movw	r16, r24
     870:	00 0f       	add	r16, r16
     872:	11 1f       	adc	r17, r17
     874:	08 0f       	add	r16, r24
     876:	19 1f       	adc	r17, r25
     878:	00 0f       	add	r16, r16
     87a:	11 1f       	adc	r17, r17
     87c:	0a 0d       	add	r16, r10
     87e:	1b 1d       	adc	r17, r11
     880:	06 0f       	add	r16, r22
     882:	17 1f       	adc	r17, r23
     884:	f8 01       	movw	r30, r16
     886:	80 81       	ld	r24, Z
     888:	82 23       	and	r24, r18
     88a:	80 83       	st	Z, r24
		LcdCache [ X_84   ][ y_48] = ~(0x40 >> (8 - dato_col)) & LcdCache [ X_84   ][ y_48];
     88c:	fa 01       	movw	r30, r20
     88e:	ee 0f       	add	r30, r30
     890:	ff 1f       	adc	r31, r31
     892:	e4 0f       	add	r30, r20
     894:	f5 1f       	adc	r31, r21
     896:	ee 0f       	add	r30, r30
     898:	ff 1f       	adc	r31, r31
     89a:	ea 0d       	add	r30, r10
     89c:	fb 1d       	adc	r31, r11
     89e:	e6 0f       	add	r30, r22
     8a0:	f7 1f       	adc	r31, r23
     8a2:	b0 80       	ld	r11, Z
     8a4:	b2 22       	and	r11, r18
     8a6:	b0 82       	st	Z, r11
				
		LCD_write_col(X_84 -2 , y_48,LcdCache [ X_84 -2][ y_48]);
     8a8:	86 2d       	mov	r24, r6
     8aa:	82 50       	subi	r24, 0x02	; 2
     8ac:	6c 2d       	mov	r22, r12
     8ae:	4c 91       	ld	r20, X
     8b0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
		LCD_write_col(X_84 -1 , y_48,LcdCache [ X_84 -1][ y_48]);
     8b4:	86 2d       	mov	r24, r6
     8b6:	81 50       	subi	r24, 0x01	; 1
     8b8:	6c 2d       	mov	r22, r12
     8ba:	f8 01       	movw	r30, r16
     8bc:	40 81       	ld	r20, Z
     8be:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
		LCD_write_col(X_84    , y_48,LcdCache [ X_84   ][ y_48]);
     8c2:	86 2d       	mov	r24, r6
     8c4:	6c 2d       	mov	r22, r12
     8c6:	4b 2d       	mov	r20, r11
     8c8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
		
		
		
}
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	ff 90       	pop	r15
     8d2:	ef 90       	pop	r14
     8d4:	df 90       	pop	r13
     8d6:	cf 90       	pop	r12
     8d8:	bf 90       	pop	r11
     8da:	af 90       	pop	r10
     8dc:	9f 90       	pop	r9
     8de:	7f 90       	pop	r7
     8e0:	6f 90       	pop	r6
     8e2:	08 95       	ret

000008e4 <delete_lines_walls>:
}

//function delete tree line wall

void delete_lines_walls()
{
     8e4:	1f 93       	push	r17
     8e6:	11 e0       	ldi	r17, 0x01	; 1
	int i,j;

	for (i=1;i<=12;i++)
	{
		LCD_delete_hline(i,7);
     8e8:	81 2f       	mov	r24, r17
     8ea:	67 e0       	ldi	r22, 0x07	; 7
     8ec:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_delete_hline>
     8f0:	1f 5f       	subi	r17, 0xFF	; 255

void delete_lines_walls()
{
	int i,j;

	for (i=1;i<=12;i++)
     8f2:	1d 30       	cpi	r17, 0x0D	; 13
     8f4:	c9 f7       	brne	.-14     	; 0x8e8 <delete_lines_walls+0x4>
		LCD_delete_hline(i,7);
	}
	
	for (i=13;i<=26;i++)
	{
		LCD_delete_hline(i,12);
     8f6:	81 2f       	mov	r24, r17
     8f8:	6c e0       	ldi	r22, 0x0C	; 12
     8fa:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_delete_hline>
     8fe:	1f 5f       	subi	r17, 0xFF	; 255
	for (i=1;i<=12;i++)
	{
		LCD_delete_hline(i,7);
	}
	
	for (i=13;i<=26;i++)
     900:	1b 31       	cpi	r17, 0x1B	; 27
     902:	c9 f7       	brne	.-14     	; 0x8f6 <delete_lines_walls+0x12>
		LCD_delete_hline(i,12);
	}	
	
	for (j=0;j<=2;j++)
	{
		LCD_write_col(48,j,0x00);
     904:	80 e3       	ldi	r24, 0x30	; 48
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	40 e0       	ldi	r20, 0x00	; 0
     90a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
     90e:	80 e3       	ldi	r24, 0x30	; 48
     910:	61 e0       	ldi	r22, 0x01	; 1
     912:	40 e0       	ldi	r20, 0x00	; 0
     914:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
     918:	80 e3       	ldi	r24, 0x30	; 48
     91a:	62 e0       	ldi	r22, 0x02	; 2
     91c:	40 e0       	ldi	r20, 0x00	; 0
     91e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
	}
	
	
}
     922:	1f 91       	pop	r17
     924:	08 95       	ret

00000926 <LCD_write_sprite>:

}

//function draw one sprite 3x3 "+" form
void LCD_write_sprite(unsigned char x_3, unsigned char y_3)
{
     926:	bf 92       	push	r11
     928:	cf 92       	push	r12
     92a:	df 92       	push	r13
     92c:	ef 92       	push	r14
     92e:	ff 92       	push	r15
     930:	0f 93       	push	r16
     932:	1f 93       	push	r17
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
	unsigned char dato_col;
	
	char str1[3], str2[3];
	
	
	X_84 = x_3 * 3 -1;
     938:	93 e0       	ldi	r25, 0x03	; 3
     93a:	89 9f       	mul	r24, r25
     93c:	e0 01       	movw	r28, r0
     93e:	11 24       	eor	r1, r1
     940:	9e 01       	movw	r18, r28
     942:	21 50       	subi	r18, 0x01	; 1
     944:	b2 2e       	mov	r11, r18
	y_48 = trunc((y_3 -1) * 3 / 8) ;


	if ((y_3 == 3) || (y_3 == 6) || (y_3 == 11) || (y_3 == 14)) 
     946:	63 30       	cpi	r22, 0x03	; 3
     948:	51 f0       	breq	.+20     	; 0x95e <LCD_write_sprite+0x38>
     94a:	66 30       	cpi	r22, 0x06	; 6
     94c:	09 f4       	brne	.+2      	; 0x950 <LCD_write_sprite+0x2a>
     94e:	54 c0       	rjmp	.+168    	; 0x9f8 <LCD_write_sprite+0xd2>
     950:	6b 30       	cpi	r22, 0x0B	; 11
     952:	09 f4       	brne	.+2      	; 0x956 <LCD_write_sprite+0x30>
     954:	a2 c0       	rjmp	.+324    	; 0xa9a <LCD_write_sprite+0x174>
     956:	6e 30       	cpi	r22, 0x0E	; 14
     958:	09 f0       	breq	.+2      	; 0x95c <LCD_write_sprite+0x36>
     95a:	47 c1       	rjmp	.+654    	; 0xbea <__stack+0xeb>
     95c:	f2 c0       	rjmp	.+484    	; 0xb42 <__stack+0x43>
		
		switch(y_3)
		{
			case 3: //case sprite is in the midle of two column
				
				LcdCache [ X_84 -2][ 0] = 0x80 | LcdCache [ X_84 -2][ 0];
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	c9 01       	movw	r24, r18
     962:	02 97       	sbiw	r24, 0x02	; 2
     964:	fc 01       	movw	r30, r24
     966:	ee 0f       	add	r30, r30
     968:	ff 1f       	adc	r31, r31
     96a:	e8 0f       	add	r30, r24
     96c:	f9 1f       	adc	r31, r25
     96e:	ee 0f       	add	r30, r30
     970:	ff 1f       	adc	r31, r31
     972:	ef 56       	subi	r30, 0x6F	; 111
     974:	fc 4f       	sbci	r31, 0xFC	; 252
     976:	80 81       	ld	r24, Z
     978:	80 68       	ori	r24, 0x80	; 128
     97a:	80 83       	st	Z, r24
				LcdCache [ X_84 -1][ 0] = 0xc0 | LcdCache [ X_84 -1][ 0];
     97c:	c9 01       	movw	r24, r18
     97e:	01 97       	sbiw	r24, 0x01	; 1
     980:	8c 01       	movw	r16, r24
     982:	00 0f       	add	r16, r16
     984:	11 1f       	adc	r17, r17
     986:	08 0f       	add	r16, r24
     988:	19 1f       	adc	r17, r25
     98a:	00 0f       	add	r16, r16
     98c:	11 1f       	adc	r17, r17
     98e:	0f 56       	subi	r16, 0x6F	; 111
     990:	1c 4f       	sbci	r17, 0xFC	; 252
     992:	d8 01       	movw	r26, r16
     994:	8c 91       	ld	r24, X
     996:	80 6c       	ori	r24, 0xC0	; 192
     998:	8c 93       	st	X, r24
				LcdCache [ X_84   ][ 0] = 0x80 | LcdCache [ X_84   ][ 0];
     99a:	79 01       	movw	r14, r18
     99c:	ee 0c       	add	r14, r14
     99e:	ff 1c       	adc	r15, r15
     9a0:	e2 0e       	add	r14, r18
     9a2:	f3 1e       	adc	r15, r19
     9a4:	ee 0c       	add	r14, r14
     9a6:	ff 1c       	adc	r15, r15
     9a8:	21 e9       	ldi	r18, 0x91	; 145
     9aa:	33 e0       	ldi	r19, 0x03	; 3
     9ac:	e2 0e       	add	r14, r18
     9ae:	f3 1e       	adc	r15, r19
     9b0:	d7 01       	movw	r26, r14
     9b2:	8c 91       	ld	r24, X
     9b4:	80 68       	ori	r24, 0x80	; 128
     9b6:	8c 93       	st	X, r24
				
				LcdCache [ X_84 -1][ 1] = 0x01 | LcdCache [ X_84 -1][ 1];
     9b8:	d8 01       	movw	r26, r16
     9ba:	11 96       	adiw	r26, 0x01	; 1
     9bc:	dc 90       	ld	r13, X
     9be:	b1 e0       	ldi	r27, 0x01	; 1
     9c0:	db 2a       	or	r13, r27
     9c2:	d8 01       	movw	r26, r16
     9c4:	11 96       	adiw	r26, 0x01	; 1
     9c6:	dc 92       	st	X, r13
								
				
				LCD_write_col(X_84 -2 , 0, LcdCache [ X_84 -2][ 0]);
     9c8:	9e 01       	movw	r18, r28
     9ca:	23 50       	subi	r18, 0x03	; 3
     9cc:	82 2f       	mov	r24, r18
     9ce:	60 e0       	ldi	r22, 0x00	; 0
     9d0:	40 81       	ld	r20, Z
     9d2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				LCD_write_col(X_84 -1 , 0, LcdCache [ X_84 -1][ 0]);
     9d6:	cb 2c       	mov	r12, r11
     9d8:	ca 94       	dec	r12
     9da:	8c 2d       	mov	r24, r12
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	d8 01       	movw	r26, r16
     9e0:	4c 91       	ld	r20, X
     9e2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				LCD_write_col(X_84    , 0, LcdCache [ X_84   ][ 0]);
     9e6:	8b 2d       	mov	r24, r11
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	f7 01       	movw	r30, r14
     9ec:	40 81       	ld	r20, Z
     9ee:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				
				
				LCD_write_col(X_84 -1 , 1, LcdCache [ X_84 -1][ 1]);
     9f2:	8c 2d       	mov	r24, r12
     9f4:	61 e0       	ldi	r22, 0x01	; 1
     9f6:	f7 c0       	rjmp	.+494    	; 0xbe6 <__stack+0xe7>
				
				break; //case sprite is in the midle of two column
			case 6:	
			
				
				LcdCache [ X_84 -1][ 1] = 0x80 | LcdCache [ X_84 -1][ 1];
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	c9 01       	movw	r24, r18
     9fc:	01 97       	sbiw	r24, 0x01	; 1
     9fe:	7c 01       	movw	r14, r24
     a00:	ee 0c       	add	r14, r14
     a02:	ff 1c       	adc	r15, r15
     a04:	e8 0e       	add	r14, r24
     a06:	f9 1e       	adc	r15, r25
     a08:	ee 0c       	add	r14, r14
     a0a:	ff 1c       	adc	r15, r15
     a0c:	d7 01       	movw	r26, r14
     a0e:	af 56       	subi	r26, 0x6F	; 111
     a10:	bc 4f       	sbci	r27, 0xFC	; 252
     a12:	11 96       	adiw	r26, 0x01	; 1
     a14:	8c 91       	ld	r24, X
     a16:	11 97       	sbiw	r26, 0x01	; 1
     a18:	80 68       	ori	r24, 0x80	; 128
     a1a:	11 96       	adiw	r26, 0x01	; 1
     a1c:	8c 93       	st	X, r24
     a1e:	11 97       	sbiw	r26, 0x01	; 1
				
				
				LcdCache [ X_84 -2][ 2] = 0x01 | LcdCache [ X_84 -2][ 2];
     a20:	c9 01       	movw	r24, r18
     a22:	02 97       	sbiw	r24, 0x02	; 2
     a24:	8c 01       	movw	r16, r24
     a26:	00 0f       	add	r16, r16
     a28:	11 1f       	adc	r17, r17
     a2a:	08 0f       	add	r16, r24
     a2c:	19 1f       	adc	r17, r25
     a2e:	00 0f       	add	r16, r16
     a30:	11 1f       	adc	r17, r17
     a32:	0d 56       	subi	r16, 0x6D	; 109
     a34:	1c 4f       	sbci	r17, 0xFC	; 252
     a36:	f8 01       	movw	r30, r16
     a38:	80 81       	ld	r24, Z
     a3a:	81 60       	ori	r24, 0x01	; 1
     a3c:	80 83       	st	Z, r24
				LcdCache [ X_84 -1][ 2] = 0x03 | LcdCache [ X_84 -1][ 2];
     a3e:	83 e9       	ldi	r24, 0x93	; 147
     a40:	93 e0       	ldi	r25, 0x03	; 3
     a42:	e8 0e       	add	r14, r24
     a44:	f9 1e       	adc	r15, r25
     a46:	f7 01       	movw	r30, r14
     a48:	80 81       	ld	r24, Z
     a4a:	83 60       	ori	r24, 0x03	; 3
     a4c:	80 83       	st	Z, r24
				LcdCache [ X_84   ][ 2] = 0x01 | LcdCache [ X_84   ][ 2];		
     a4e:	f9 01       	movw	r30, r18
     a50:	ee 0f       	add	r30, r30
     a52:	ff 1f       	adc	r31, r31
     a54:	e2 0f       	add	r30, r18
     a56:	f3 1f       	adc	r31, r19
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	ed 56       	subi	r30, 0x6D	; 109
     a5e:	fc 4f       	sbci	r31, 0xFC	; 252
     a60:	d0 80       	ld	r13, Z
     a62:	21 e0       	ldi	r18, 0x01	; 1
     a64:	d2 2a       	or	r13, r18
     a66:	d0 82       	st	Z, r13
			
			
			
				
				LCD_write_col(X_84 -1 , 1,LcdCache [ X_84 -1][ 1]);
     a68:	cb 2c       	mov	r12, r11
     a6a:	ca 94       	dec	r12
     a6c:	8c 2d       	mov	r24, r12
     a6e:	61 e0       	ldi	r22, 0x01	; 1
     a70:	11 96       	adiw	r26, 0x01	; 1
     a72:	4c 91       	ld	r20, X
     a74:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				
				
				LCD_write_col(X_84 -2 , 2, LcdCache [ X_84 -2][ 2]);
     a78:	de 01       	movw	r26, r28
     a7a:	a3 50       	subi	r26, 0x03	; 3
     a7c:	8a 2f       	mov	r24, r26
     a7e:	62 e0       	ldi	r22, 0x02	; 2
     a80:	f8 01       	movw	r30, r16
     a82:	40 81       	ld	r20, Z
     a84:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				LCD_write_col(X_84 -1 , 2, LcdCache [ X_84 -1][ 2]);
     a88:	8c 2d       	mov	r24, r12
     a8a:	62 e0       	ldi	r22, 0x02	; 2
     a8c:	d7 01       	movw	r26, r14
     a8e:	4c 91       	ld	r20, X
     a90:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				LCD_write_col(X_84    , 2, LcdCache [ X_84   ][ 2]);			
     a94:	8b 2d       	mov	r24, r11
     a96:	62 e0       	ldi	r22, 0x02	; 2
     a98:	a6 c0       	rjmp	.+332    	; 0xbe6 <__stack+0xe7>
				break;
			

			case 11:	//case sprite is in the midle of two column
			
				LcdCache [ X_84 -2][ 3] = 0x80 | LcdCache [ X_84 -2][ 3];
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	c9 01       	movw	r24, r18
     a9e:	02 97       	sbiw	r24, 0x02	; 2
     aa0:	fc 01       	movw	r30, r24
     aa2:	ee 0f       	add	r30, r30
     aa4:	ff 1f       	adc	r31, r31
     aa6:	e8 0f       	add	r30, r24
     aa8:	f9 1f       	adc	r31, r25
     aaa:	ee 0f       	add	r30, r30
     aac:	ff 1f       	adc	r31, r31
     aae:	ef 56       	subi	r30, 0x6F	; 111
     ab0:	fc 4f       	sbci	r31, 0xFC	; 252
     ab2:	83 81       	ldd	r24, Z+3	; 0x03
     ab4:	80 68       	ori	r24, 0x80	; 128
     ab6:	83 83       	std	Z+3, r24	; 0x03
				LcdCache [ X_84 -1][ 3] = 0xc0 | LcdCache [ X_84 -1][ 3];
     ab8:	c9 01       	movw	r24, r18
     aba:	01 97       	sbiw	r24, 0x01	; 1
     abc:	8c 01       	movw	r16, r24
     abe:	00 0f       	add	r16, r16
     ac0:	11 1f       	adc	r17, r17
     ac2:	08 0f       	add	r16, r24
     ac4:	19 1f       	adc	r17, r25
     ac6:	00 0f       	add	r16, r16
     ac8:	11 1f       	adc	r17, r17
     aca:	0f 56       	subi	r16, 0x6F	; 111
     acc:	1c 4f       	sbci	r17, 0xFC	; 252
     ace:	d8 01       	movw	r26, r16
     ad0:	13 96       	adiw	r26, 0x03	; 3
     ad2:	8c 91       	ld	r24, X
     ad4:	13 97       	sbiw	r26, 0x03	; 3
     ad6:	80 6c       	ori	r24, 0xC0	; 192
     ad8:	13 96       	adiw	r26, 0x03	; 3
     ada:	8c 93       	st	X, r24
				LcdCache [ X_84   ][ 3] = 0x80 | LcdCache [ X_84   ][ 3];
     adc:	79 01       	movw	r14, r18
     ade:	ee 0c       	add	r14, r14
     ae0:	ff 1c       	adc	r15, r15
     ae2:	e2 0e       	add	r14, r18
     ae4:	f3 1e       	adc	r15, r19
     ae6:	ee 0c       	add	r14, r14
     ae8:	ff 1c       	adc	r15, r15
     aea:	21 e9       	ldi	r18, 0x91	; 145
     aec:	33 e0       	ldi	r19, 0x03	; 3
     aee:	e2 0e       	add	r14, r18
     af0:	f3 1e       	adc	r15, r19
     af2:	d7 01       	movw	r26, r14
     af4:	13 96       	adiw	r26, 0x03	; 3
     af6:	8c 91       	ld	r24, X
     af8:	13 97       	sbiw	r26, 0x03	; 3
     afa:	80 68       	ori	r24, 0x80	; 128
     afc:	13 96       	adiw	r26, 0x03	; 3
     afe:	8c 93       	st	X, r24
				
				
				LcdCache [ X_84 -1][ 4] = 0x01 | LcdCache [ X_84 -1][ 4];
     b00:	d8 01       	movw	r26, r16
     b02:	14 96       	adiw	r26, 0x04	; 4
     b04:	dc 90       	ld	r13, X
     b06:	b1 e0       	ldi	r27, 0x01	; 1
     b08:	db 2a       	or	r13, r27
     b0a:	d8 01       	movw	r26, r16
     b0c:	14 96       	adiw	r26, 0x04	; 4
     b0e:	dc 92       	st	X, r13
								
			
				LCD_write_col(X_84 -2 , 3,LcdCache [ X_84 -2][ 3] );
     b10:	9e 01       	movw	r18, r28
     b12:	23 50       	subi	r18, 0x03	; 3
     b14:	82 2f       	mov	r24, r18
     b16:	63 e0       	ldi	r22, 0x03	; 3
     b18:	43 81       	ldd	r20, Z+3	; 0x03
     b1a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				LCD_write_col(X_84 -1 , 3,LcdCache [ X_84 -1][ 3] );
     b1e:	cb 2c       	mov	r12, r11
     b20:	ca 94       	dec	r12
     b22:	8c 2d       	mov	r24, r12
     b24:	63 e0       	ldi	r22, 0x03	; 3
     b26:	d8 01       	movw	r26, r16
     b28:	13 96       	adiw	r26, 0x03	; 3
     b2a:	4c 91       	ld	r20, X
     b2c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				LCD_write_col(X_84    , 3,LcdCache [ X_84   ][ 3] );
     b30:	8b 2d       	mov	r24, r11
     b32:	63 e0       	ldi	r22, 0x03	; 3
     b34:	f7 01       	movw	r30, r14
     b36:	43 81       	ldd	r20, Z+3	; 0x03
     b38:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				
				
				LCD_write_col(X_84 -1 , 4, LcdCache [ X_84 -1][ 4]);
     b3c:	8c 2d       	mov	r24, r12
     b3e:	64 e0       	ldi	r22, 0x04	; 4
     b40:	52 c0       	rjmp	.+164    	; 0xbe6 <__stack+0xe7>
				break;
			
			case 14:	//case sprite is in the midle of two column
			
				
				LcdCache [ X_84 -1][ 4] = 0x80 | LcdCache [ X_84 -1][ 4];
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	c9 01       	movw	r24, r18
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	7c 01       	movw	r14, r24
     b4a:	ee 0c       	add	r14, r14
     b4c:	ff 1c       	adc	r15, r15
     b4e:	e8 0e       	add	r14, r24
     b50:	f9 1e       	adc	r15, r25
     b52:	ee 0c       	add	r14, r14
     b54:	ff 1c       	adc	r15, r15
     b56:	81 e9       	ldi	r24, 0x91	; 145
     b58:	93 e0       	ldi	r25, 0x03	; 3
     b5a:	e8 0e       	add	r14, r24
     b5c:	f9 1e       	adc	r15, r25
     b5e:	d7 01       	movw	r26, r14
     b60:	14 96       	adiw	r26, 0x04	; 4
     b62:	8c 91       	ld	r24, X
     b64:	14 97       	sbiw	r26, 0x04	; 4
     b66:	80 68       	ori	r24, 0x80	; 128
     b68:	14 96       	adiw	r26, 0x04	; 4
     b6a:	8c 93       	st	X, r24
     b6c:	14 97       	sbiw	r26, 0x04	; 4
				
				
				LcdCache [ X_84 -2][ 5] = 0x01 | LcdCache [ X_84 -2][ 5];
     b6e:	c9 01       	movw	r24, r18
     b70:	02 97       	sbiw	r24, 0x02	; 2
     b72:	8c 01       	movw	r16, r24
     b74:	00 0f       	add	r16, r16
     b76:	11 1f       	adc	r17, r17
     b78:	08 0f       	add	r16, r24
     b7a:	19 1f       	adc	r17, r25
     b7c:	00 0f       	add	r16, r16
     b7e:	11 1f       	adc	r17, r17
     b80:	0f 56       	subi	r16, 0x6F	; 111
     b82:	1c 4f       	sbci	r17, 0xFC	; 252
     b84:	f8 01       	movw	r30, r16
     b86:	85 81       	ldd	r24, Z+5	; 0x05
     b88:	81 60       	ori	r24, 0x01	; 1
     b8a:	85 83       	std	Z+5, r24	; 0x05
				LcdCache [ X_84 -1][ 5] = 0x03 | LcdCache [ X_84 -1][ 5];
     b8c:	15 96       	adiw	r26, 0x05	; 5
     b8e:	8c 91       	ld	r24, X
     b90:	15 97       	sbiw	r26, 0x05	; 5
     b92:	83 60       	ori	r24, 0x03	; 3
     b94:	15 96       	adiw	r26, 0x05	; 5
     b96:	8c 93       	st	X, r24
     b98:	15 97       	sbiw	r26, 0x05	; 5
				LcdCache [ X_84   ][ 5] = 0x01 | LcdCache [ X_84   ][ 5];				
     b9a:	f9 01       	movw	r30, r18
     b9c:	ee 0f       	add	r30, r30
     b9e:	ff 1f       	adc	r31, r31
     ba0:	e2 0f       	add	r30, r18
     ba2:	f3 1f       	adc	r31, r19
     ba4:	ee 0f       	add	r30, r30
     ba6:	ff 1f       	adc	r31, r31
     ba8:	ef 56       	subi	r30, 0x6F	; 111
     baa:	fc 4f       	sbci	r31, 0xFC	; 252
     bac:	d5 80       	ldd	r13, Z+5	; 0x05
     bae:	21 e0       	ldi	r18, 0x01	; 1
     bb0:	d2 2a       	or	r13, r18
     bb2:	d5 82       	std	Z+5, r13	; 0x05
			
				
				LCD_write_col(X_84 -1 , 4,LcdCache [ X_84 -1][ 4] );
     bb4:	cb 2c       	mov	r12, r11
     bb6:	ca 94       	dec	r12
     bb8:	8c 2d       	mov	r24, r12
     bba:	64 e0       	ldi	r22, 0x04	; 4
     bbc:	14 96       	adiw	r26, 0x04	; 4
     bbe:	4c 91       	ld	r20, X
     bc0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				
				
				LCD_write_col(X_84 -2 , 5, LcdCache [ X_84 -2][ 5]);
     bc4:	de 01       	movw	r26, r28
     bc6:	a3 50       	subi	r26, 0x03	; 3
     bc8:	8a 2f       	mov	r24, r26
     bca:	65 e0       	ldi	r22, 0x05	; 5
     bcc:	f8 01       	movw	r30, r16
     bce:	45 81       	ldd	r20, Z+5	; 0x05
     bd0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				LCD_write_col(X_84 -1 , 5, LcdCache [ X_84 -1][ 5]);
     bd4:	8c 2d       	mov	r24, r12
     bd6:	65 e0       	ldi	r22, 0x05	; 5
     bd8:	d7 01       	movw	r26, r14
     bda:	15 96       	adiw	r26, 0x05	; 5
     bdc:	4c 91       	ld	r20, X
     bde:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
				LCD_write_col(X_84    , 5, LcdCache [ X_84   ][ 5]);					
     be2:	8b 2d       	mov	r24, r11
     be4:	65 e0       	ldi	r22, 0x05	; 5
     be6:	4d 2d       	mov	r20, r13
     be8:	70 c0       	rjmp	.+224    	; 0xcca <__stack+0x1cb>
	
	char str1[3], str2[3];
	
	
	X_84 = x_3 * 3 -1;
	y_48 = trunc((y_3 -1) * 3 / 8) ;
     bea:	69 9f       	mul	r22, r25
     bec:	80 01       	movw	r16, r0
     bee:	11 24       	eor	r1, r1
     bf0:	c8 01       	movw	r24, r16
     bf2:	03 97       	sbiw	r24, 0x03	; 3
     bf4:	68 e0       	ldi	r22, 0x08	; 8
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__divmodhi4>
     bfc:	88 27       	eor	r24, r24
     bfe:	77 fd       	sbrc	r23, 7
     c00:	80 95       	com	r24
     c02:	98 2f       	mov	r25, r24
     c04:	0e 94 c5 0c 	call	0x198a	; 0x198a <__floatsisf>
     c08:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <trunc>
     c0c:	0e 94 97 0c 	call	0x192e	; 0x192e <__fixunssfsi>
     c10:	d6 2e       	mov	r13, r22
		}
	
	}
	else //case sprite is into one column
	{
		dato_col = y_3 * 3  - 8 * y_48 ;		
     c12:	e6 2e       	mov	r14, r22
     c14:	ff 24       	eor	r15, r15
     c16:	c7 01       	movw	r24, r14
     c18:	f3 e0       	ldi	r31, 0x03	; 3
     c1a:	88 0f       	add	r24, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	fa 95       	dec	r31
     c20:	e1 f7       	brne	.-8      	; 0xc1a <__stack+0x11b>
     c22:	20 2f       	mov	r18, r16
     c24:	28 1b       	sub	r18, r24
		
		if (dato_col == 0)
     c26:	09 f0       	breq	.+2      	; 0xc2a <__stack+0x12b>
				
				
		}
		else 
		{
			dato_col = dato_col -3;	
     c28:	23 50       	subi	r18, 0x03	; 3
		}
		
				
		LcdCache [ X_84 -2][ y_48] = (0x02 <<  dato_col) | LcdCache [ X_84 -2][ y_48];
     c2a:	42 e0       	ldi	r20, 0x02	; 2
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	02 2e       	mov	r0, r18
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <__stack+0x137>
     c32:	44 0f       	add	r20, r20
     c34:	55 1f       	adc	r21, r21
     c36:	0a 94       	dec	r0
     c38:	e2 f7       	brpl	.-8      	; 0xc32 <__stack+0x133>
     c3a:	6b 2d       	mov	r22, r11
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	cb 01       	movw	r24, r22
     c40:	02 97       	sbiw	r24, 0x02	; 2
     c42:	dc 01       	movw	r26, r24
     c44:	aa 0f       	add	r26, r26
     c46:	bb 1f       	adc	r27, r27
     c48:	a8 0f       	add	r26, r24
     c4a:	b9 1f       	adc	r27, r25
     c4c:	aa 0f       	add	r26, r26
     c4e:	bb 1f       	adc	r27, r27
     c50:	ae 0d       	add	r26, r14
     c52:	bf 1d       	adc	r27, r15
     c54:	af 56       	subi	r26, 0x6F	; 111
     c56:	bc 4f       	sbci	r27, 0xFC	; 252
     c58:	8c 91       	ld	r24, X
     c5a:	84 2b       	or	r24, r20
     c5c:	8c 93       	st	X, r24
		LcdCache [ X_84 -1][ y_48] = (0x07 <<  dato_col) | LcdCache [ X_84 -1][ y_48];
     c5e:	cb 01       	movw	r24, r22
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	8c 01       	movw	r16, r24
     c64:	00 0f       	add	r16, r16
     c66:	11 1f       	adc	r17, r17
     c68:	08 0f       	add	r16, r24
     c6a:	19 1f       	adc	r17, r25
     c6c:	00 0f       	add	r16, r16
     c6e:	11 1f       	adc	r17, r17
     c70:	0e 0d       	add	r16, r14
     c72:	1f 1d       	adc	r17, r15
     c74:	0f 56       	subi	r16, 0x6F	; 111
     c76:	1c 4f       	sbci	r17, 0xFC	; 252
     c78:	87 e0       	ldi	r24, 0x07	; 7
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <__stack+0x183>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	2a 95       	dec	r18
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <__stack+0x17f>
     c86:	f8 01       	movw	r30, r16
     c88:	20 81       	ld	r18, Z
     c8a:	28 2b       	or	r18, r24
     c8c:	20 83       	st	Z, r18
		LcdCache [ X_84   ][ y_48] = (0x02 <<  dato_col) | LcdCache [ X_84   ][ y_48];
     c8e:	fb 01       	movw	r30, r22
     c90:	ee 0f       	add	r30, r30
     c92:	ff 1f       	adc	r31, r31
     c94:	e6 0f       	add	r30, r22
     c96:	f7 1f       	adc	r31, r23
     c98:	ee 0f       	add	r30, r30
     c9a:	ff 1f       	adc	r31, r31
     c9c:	ee 0d       	add	r30, r14
     c9e:	ff 1d       	adc	r31, r15
     ca0:	ef 56       	subi	r30, 0x6F	; 111
     ca2:	fc 4f       	sbci	r31, 0xFC	; 252
     ca4:	f0 80       	ld	r15, Z
     ca6:	f4 2a       	or	r15, r20
     ca8:	f0 82       	st	Z, r15
				
		
		LCD_write_col(X_84 -2 , y_48,LcdCache [ X_84 -2][ y_48]);
     caa:	8b 2d       	mov	r24, r11
     cac:	82 50       	subi	r24, 0x02	; 2
     cae:	6d 2d       	mov	r22, r13
     cb0:	4c 91       	ld	r20, X
     cb2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
		LCD_write_col(X_84 -1 , y_48,LcdCache [ X_84 -1][ y_48]);
     cb6:	8b 2d       	mov	r24, r11
     cb8:	81 50       	subi	r24, 0x01	; 1
     cba:	6d 2d       	mov	r22, r13
     cbc:	d8 01       	movw	r26, r16
     cbe:	4c 91       	ld	r20, X
     cc0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
		LCD_write_col(X_84    , y_48,LcdCache [ X_84   ][ y_48]);
     cc4:	8b 2d       	mov	r24, r11
     cc6:	6d 2d       	mov	r22, r13
     cc8:	4f 2d       	mov	r20, r15
     cca:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
		
	}

}
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	ff 90       	pop	r15
     cd8:	ef 90       	pop	r14
     cda:	df 90       	pop	r13
     cdc:	cf 90       	pop	r12
     cde:	bf 90       	pop	r11
     ce0:	08 95       	ret

00000ce2 <LCD_write_snake>:

}

//function to draw all snake
void LCD_write_snake()
{
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	07 ea       	ldi	r16, 0xA7	; 167
     cec:	15 e0       	ldi	r17, 0x05	; 5
     cee:	c0 e0       	ldi	r28, 0x00	; 0
     cf0:	d0 e0       	ldi	r29, 0x00	; 0
     cf2:	0b c0       	rjmp	.+22     	; 0xd0a <LCD_write_snake+0x28>
	int s;
	
		for (s=0;s<=snake_len-1;s++)
		{
			LCD_write_sprite(Lcd_snake_x3[s],Lcd_snake_y3[s]);	
     cf4:	fe 01       	movw	r30, r28
     cf6:	e7 57       	subi	r30, 0x77	; 119
     cf8:	fa 4f       	sbci	r31, 0xFA	; 250
     cfa:	80 81       	ld	r24, Z
     cfc:	f8 01       	movw	r30, r16
     cfe:	60 81       	ld	r22, Z
     d00:	0e 94 93 04 	call	0x926	; 0x926 <LCD_write_sprite>
//function to draw all snake
void LCD_write_snake()
{
	int s;
	
		for (s=0;s<=snake_len-1;s++)
     d04:	21 96       	adiw	r28, 0x01	; 1
     d06:	0e 5f       	subi	r16, 0xFE	; 254
     d08:	1f 4f       	sbci	r17, 0xFF	; 255
     d0a:	80 91 cf 05 	lds	r24, 0x05CF
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	c8 17       	cp	r28, r24
     d12:	d9 07       	cpc	r29, r25
     d14:	7c f3       	brlt	.-34     	; 0xcf4 <LCD_write_snake+0x12>
		{
			LCD_write_sprite(Lcd_snake_x3[s],Lcd_snake_y3[s]);	
				
		}

}
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	08 95       	ret

00000d20 <snake_game_ini>:
//function to ini var game
void snake_game_ini()
{
	int i,j; //auxiliar var

	x_game = 10;
     d20:	9a e0       	ldi	r25, 0x0A	; 10
     d22:	90 93 8d 03 	sts	0x038D, r25
	y_game = 10;
     d26:	90 93 8e 03 	sts	0x038E, r25
	
	snake_len = 2; //size ini of snake
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	80 93 cf 05 	sts	0x05CF, r24
		
	//the two firt sprite location	
	Lcd_snake_x3[0] = 10;
     d30:	90 93 89 05 	sts	0x0589, r25
	Lcd_snake_y3[0] = 9;
     d34:	29 e0       	ldi	r18, 0x09	; 9
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	30 93 a8 05 	sts	0x05A8, r19
     d3c:	20 93 a7 05 	sts	0x05A7, r18
	
	Lcd_snake_x3[1] = 11;
     d40:	8b e0       	ldi	r24, 0x0B	; 11
     d42:	80 93 8a 05 	sts	0x058A, r24
	Lcd_snake_y3[1] = 9;
     d46:	30 93 aa 05 	sts	0x05AA, r19
     d4a:	20 93 a9 05 	sts	0x05A9, r18
     d4e:	e1 e9       	ldi	r30, 0x91	; 145
     d50:	f3 e0       	ldi	r31, 0x03	; 3
	//save the cache to cero	
	for (i=0;i<=83;i++)
	{
		for (j=0;j<=5;j++)
		{
			LcdCache [ i][ j] = 0;
     d52:	10 82       	st	Z, r1
     d54:	11 82       	std	Z+1, r1	; 0x01
     d56:	12 82       	std	Z+2, r1	; 0x02
     d58:	13 82       	std	Z+3, r1	; 0x03
     d5a:	14 82       	std	Z+4, r1	; 0x04
     d5c:	15 82       	std	Z+5, r1	; 0x05
     d5e:	36 96       	adiw	r30, 0x06	; 6
	Lcd_snake_x3[1] = 11;
	Lcd_snake_y3[1] = 9;
	
		
	//save the cache to cero	
	for (i=0;i<=83;i++)
     d60:	85 e0       	ldi	r24, 0x05	; 5
     d62:	e9 38       	cpi	r30, 0x89	; 137
     d64:	f8 07       	cpc	r31, r24
     d66:	a9 f7       	brne	.-22     	; 0xd52 <snake_game_ini+0x32>
	
	
	}
	
	
	LCD_write_snake();
     d68:	0e 94 71 06 	call	0xce2	; 0xce2 <LCD_write_snake>


}
     d6c:	08 95       	ret

00000d6e <game_over>:
}

//function to show game over and ini var game
void game_over()
{
	direc = ini;
     d6e:	84 e0       	ldi	r24, 0x04	; 4
     d70:	80 93 73 03 	sts	0x0373, r24

	LCD_clear();
     d74:	0e 94 88 00 	call	0x110	; 0x110 <LCD_clear>
	LCD_gotoXY(0,2);
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	62 e0       	ldi	r22, 0x02	; 2
     d7c:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_gotoXY>
	LCD_write_string(" Game ");
     d80:	88 e3       	ldi	r24, 0x38	; 56
     d82:	91 e0       	ldi	r25, 0x01	; 1
     d84:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_write_string>
	
	LCD_gotoXY(0,3);
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	63 e0       	ldi	r22, 0x03	; 3
     d8c:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_gotoXY>
	LCD_write_string("       Over");
     d90:	8f e3       	ldi	r24, 0x3F	; 63
     d92:	91 e0       	ldi	r25, 0x01	; 1
     d94:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_write_string>
     d98:	80 e2       	ldi	r24, 0x20	; 32
     d9a:	9e e4       	ldi	r25, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d9c:	28 ec       	ldi	r18, 0xC8	; 200
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	f9 01       	movw	r30, r18
     da2:	31 97       	sbiw	r30, 0x01	; 1
     da4:	f1 f7       	brne	.-4      	; 0xda2 <game_over+0x34>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     da6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     da8:	d9 f7       	brne	.-10     	; 0xda0 <game_over+0x32>

	
	_delay_ms(2000);
	LCD_clear();
     daa:	0e 94 88 00 	call	0x110	; 0x110 <LCD_clear>
	
	snake_game_ini();
     dae:	0e 94 90 06 	call	0xd20	; 0xd20 <snake_game_ini>
	seed = 100;
     db2:	84 e6       	ldi	r24, 0x64	; 100
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	a0 e0       	ldi	r26, 0x00	; 0
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	80 93 84 03 	sts	0x0384, r24
     dbe:	90 93 85 03 	sts	0x0385, r25
     dc2:	a0 93 86 03 	sts	0x0386, r26
     dc6:	b0 93 87 03 	sts	0x0387, r27
	
	ini_ramdom =0;
     dca:	10 92 7a 03 	sts	0x037A, r1
	
	 
	
	x_game = 10;
     dce:	8a e0       	ldi	r24, 0x0A	; 10
     dd0:	80 93 8d 03 	sts	0x038D, r24
	y_game = 10;
     dd4:	80 93 8e 03 	sts	0x038E, r24
	
	score_uni = 0;
     dd8:	10 92 88 03 	sts	0x0388, r1
	score_ten = 0;
     ddc:	10 92 89 03 	sts	0x0389, r1
	score =0;
     de0:	10 92 8a 03 	sts	0x038A, r1
	
	live = 5;	
     de4:	85 e0       	ldi	r24, 0x05	; 5
     de6:	80 93 8b 03 	sts	0x038B, r24
	
		
	LCD_gotoXY(0,0);
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_gotoXY>
	LCD_write_char(score_ten + 0x30);
     df2:	80 e3       	ldi	r24, 0x30	; 48
     df4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_char>
	LCD_write_char(score_uni + 0x30);
     df8:	80 e3       	ldi	r24, 0x30	; 48
     dfa:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_char>
	
	LCD_gotoXY(13,0);
     dfe:	8d e0       	ldi	r24, 0x0D	; 13
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_gotoXY>
	LCD_write_char('(');
     e06:	88 e2       	ldi	r24, 0x28	; 40
     e08:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_char>
	LCD_write_char(live + 0x30);
     e0c:	85 e3       	ldi	r24, 0x35	; 53
     e0e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_char>
	LCD_write_char(')');
     e12:	89 e2       	ldi	r24, 0x29	; 41
     e14:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_char>
	
	lines_walls =0;
     e18:	10 92 83 03 	sts	0x0383, r1
	
	
	
}
     e1c:	08 95       	ret

00000e1e <live_lose>:


//function decremented live
void live_lose()
{
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17

	live = live -1;
     e22:	10 91 8b 03 	lds	r17, 0x038B
     e26:	01 2f       	mov	r16, r17
     e28:	01 50       	subi	r16, 0x01	; 1
     e2a:	00 93 8b 03 	sts	0x038B, r16
					
	LCD_gotoXY(13,0);
     e2e:	8d e0       	ldi	r24, 0x0D	; 13
     e30:	60 e0       	ldi	r22, 0x00	; 0
     e32:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_gotoXY>
	LCD_write_char('(');
     e36:	88 e2       	ldi	r24, 0x28	; 40
     e38:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_char>
	LCD_write_char(live + 0x30);
     e3c:	81 2f       	mov	r24, r17
     e3e:	81 5d       	subi	r24, 0xD1	; 209
     e40:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_char>
	LCD_write_char(')');
     e44:	89 e2       	ldi	r24, 0x29	; 41
     e46:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_char>
					
					
				
	if (live == 0)
     e4a:	00 23       	and	r16, r16
     e4c:	11 f4       	brne	.+4      	; 0xe52 <live_lose+0x34>
	{
		game_over();
     e4e:	0e 94 b7 06 	call	0xd6e	; 0xd6e <game_over>
	}
	
	
}
     e52:	1f 91       	pop	r17
     e54:	0f 91       	pop	r16
     e56:	08 95       	ret

00000e58 <ramdom_food>:
{
	int i, cont =0;

		while (1)
		{
			srand(seed+x_rand_food);
     e58:	20 91 74 03 	lds	r18, 0x0374
     e5c:	80 91 84 03 	lds	r24, 0x0384
     e60:	90 91 85 03 	lds	r25, 0x0385
     e64:	82 0f       	add	r24, r18
     e66:	91 1d       	adc	r25, r1
     e68:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <srand>
				
			x_rand_food = trunc ( rand() % 27 + 1);
     e6c:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <rand>
     e70:	6b e1       	ldi	r22, 0x1B	; 27
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__divmodhi4>
     e78:	01 96       	adiw	r24, 0x01	; 1
     e7a:	aa 27       	eor	r26, r26
     e7c:	97 fd       	sbrc	r25, 7
     e7e:	a0 95       	com	r26
     e80:	ba 2f       	mov	r27, r26
     e82:	bc 01       	movw	r22, r24
     e84:	cd 01       	movw	r24, r26
     e86:	0e 94 c5 0c 	call	0x198a	; 0x198a <__floatsisf>
     e8a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <trunc>
     e8e:	0e 94 97 0c 	call	0x192e	; 0x192e <__fixunssfsi>
     e92:	60 93 74 03 	sts	0x0374, r22
			y_rand_food = trunc ( rand() % 16 + 1 );
     e96:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <rand>
     e9a:	60 e1       	ldi	r22, 0x10	; 16
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__divmodhi4>
     ea2:	01 96       	adiw	r24, 0x01	; 1
     ea4:	aa 27       	eor	r26, r26
     ea6:	97 fd       	sbrc	r25, 7
     ea8:	a0 95       	com	r26
     eaa:	ba 2f       	mov	r27, r26
     eac:	bc 01       	movw	r22, r24
     eae:	cd 01       	movw	r24, r26
     eb0:	0e 94 c5 0c 	call	0x198a	; 0x198a <__floatsisf>
     eb4:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <trunc>
     eb8:	0e 94 97 0c 	call	0x192e	; 0x192e <__fixunssfsi>
     ebc:	96 2f       	mov	r25, r22
     ebe:	60 93 8c 03 	sts	0x038C, r22
			
			
			if ((x_rand_food <27) && (y_rand_food <16) && (y_rand_food >3))
     ec2:	e0 91 74 03 	lds	r30, 0x0374
     ec6:	eb 31       	cpi	r30, 0x1B	; 27
     ec8:	38 f6       	brcc	.-114    	; 0xe58 <ramdom_food>
     eca:	60 31       	cpi	r22, 0x10	; 16
     ecc:	28 f6       	brcc	.-118    	; 0xe58 <ramdom_food>
     ece:	64 30       	cpi	r22, 0x04	; 4
     ed0:	18 f2       	brcs	.-122    	; 0xe58 <ramdom_food>
			{
					
					if (lines_walls == 1)
     ed2:	80 91 83 03 	lds	r24, 0x0383
     ed6:	81 30       	cpi	r24, 0x01	; 1
     ed8:	29 f5       	brne	.+74     	; 0xf24 <ramdom_food+0xcc>
						}

					
					else 
					{
						break;
     eda:	21 e0       	ldi	r18, 0x01	; 1
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	40 e0       	ldi	r20, 0x00	; 0
     ee0:	50 e0       	ldi	r21, 0x00	; 0
					{
						cont = 0;
					
						for (i=1;i<=12;i++)
						{
							if ((x_rand_food == i) && (y_rand_food == 7))
     ee2:	6e 2f       	mov	r22, r30
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	62 17       	cp	r22, r18
     ee8:	73 07       	cpc	r23, r19
     eea:	21 f4       	brne	.+8      	; 0xef4 <ramdom_food+0x9c>
     eec:	97 30       	cpi	r25, 0x07	; 7
     eee:	11 f4       	brne	.+4      	; 0xef4 <ramdom_food+0x9c>
							{
								cont ++;
     ef0:	4f 5f       	subi	r20, 0xFF	; 255
     ef2:	5f 4f       	sbci	r21, 0xFF	; 255
					
					if (lines_walls == 1)
					{
						cont = 0;
					
						for (i=1;i<=12;i++)
     ef4:	2f 5f       	subi	r18, 0xFF	; 255
     ef6:	3f 4f       	sbci	r19, 0xFF	; 255
     ef8:	2d 30       	cpi	r18, 0x0D	; 13
     efa:	31 05       	cpc	r19, r1
     efc:	a1 f7       	brne	.-24     	; 0xee6 <ramdom_food+0x8e>
								cont ++;

							}
						}	
							
							if (cont == 0)
     efe:	41 15       	cp	r20, r1
     f00:	51 05       	cpc	r21, r1
     f02:	09 f0       	breq	.+2      	; 0xf06 <ramdom_food+0xae>
     f04:	a9 cf       	rjmp	.-174    	; 0xe58 <ramdom_food>
							{														
								for (i=13;i<=26;i++)
								{
									if ((x_rand_food == i) && (y_rand_food == 12))
     f06:	62 17       	cp	r22, r18
     f08:	73 07       	cpc	r23, r19
     f0a:	21 f4       	brne	.+8      	; 0xf14 <ramdom_food+0xbc>
     f0c:	9c 30       	cpi	r25, 0x0C	; 12
     f0e:	11 f4       	brne	.+4      	; 0xf14 <ramdom_food+0xbc>
									{
										cont ++;
     f10:	4f 5f       	subi	r20, 0xFF	; 255
     f12:	5f 4f       	sbci	r21, 0xFF	; 255
							}
						}	
							
							if (cont == 0)
							{														
								for (i=13;i<=26;i++)
     f14:	2f 5f       	subi	r18, 0xFF	; 255
     f16:	3f 4f       	sbci	r19, 0xFF	; 255
     f18:	2b 31       	cpi	r18, 0x1B	; 27
     f1a:	31 05       	cpc	r19, r1
     f1c:	a1 f7       	brne	.-24     	; 0xf06 <ramdom_food+0xae>
										
									}
							
								}

								if (cont == 0)
     f1e:	45 2b       	or	r20, r21
     f20:	09 f0       	breq	.+2      	; 0xf24 <ramdom_food+0xcc>
     f22:	9a cf       	rjmp	.-204    	; 0xe58 <ramdom_food>
				
			}
			
		}		
		//draw sprite food	
		LCD_write_sprite(x_rand_food,y_rand_food);
     f24:	8e 2f       	mov	r24, r30
     f26:	69 2f       	mov	r22, r25
     f28:	0e 94 93 04 	call	0x926	; 0x926 <LCD_write_sprite>
		

}
     f2c:	08 95       	ret

00000f2e <LCD_draw_hline>:
}


//function to draw horizontal line
void LCD_draw_hline(unsigned char x_3, unsigned char y_3)
{
     f2e:	6f 92       	push	r6
     f30:	7f 92       	push	r7
     f32:	9f 92       	push	r9
     f34:	af 92       	push	r10
     f36:	bf 92       	push	r11
     f38:	cf 92       	push	r12
     f3a:	df 92       	push	r13
     f3c:	ef 92       	push	r14
     f3e:	ff 92       	push	r15
     f40:	0f 93       	push	r16
     f42:	1f 93       	push	r17
	unsigned char X_84;
	unsigned char y_48;
	unsigned char dato_col;
	
	
	X_84 = x_3 * 3;
     f44:	93 e0       	ldi	r25, 0x03	; 3
     f46:	89 9f       	mul	r24, r25
     f48:	30 01       	movw	r6, r0
     f4a:	11 24       	eor	r1, r1
	y_48 = trunc(y_3 * 3 / 8) ;
     f4c:	69 9f       	mul	r22, r25
     f4e:	80 01       	movw	r16, r0
     f50:	11 24       	eor	r1, r1
     f52:	b8 01       	movw	r22, r16
     f54:	33 e0       	ldi	r19, 0x03	; 3
     f56:	75 95       	asr	r23
     f58:	67 95       	ror	r22
     f5a:	3a 95       	dec	r19
     f5c:	e1 f7       	brne	.-8      	; 0xf56 <LCD_draw_hline+0x28>
     f5e:	88 27       	eor	r24, r24
     f60:	77 fd       	sbrc	r23, 7
     f62:	80 95       	com	r24
     f64:	98 2f       	mov	r25, r24
     f66:	0e 94 c5 0c 	call	0x198a	; 0x198a <__floatsisf>
     f6a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <trunc>
     f6e:	0e 94 97 0c 	call	0x192e	; 0x192e <__fixunssfsi>
     f72:	6b 01       	movw	r12, r22
     f74:	7c 01       	movw	r14, r24


		dato_col = y_3 * 3  - 8 * y_48;	
     f76:	a6 2e       	mov	r10, r22
     f78:	bb 24       	eor	r11, r11


		LcdCache [ X_84 -2][ y_48] = (0x40 >> (8 - dato_col)) | LcdCache [ X_84 -2][ y_48];
     f7a:	c5 01       	movw	r24, r10
     f7c:	23 e0       	ldi	r18, 0x03	; 3
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	2a 95       	dec	r18
     f84:	e1 f7       	brne	.-8      	; 0xf7e <LCD_draw_hline+0x50>
     f86:	08 1b       	sub	r16, r24
     f88:	88 e0       	ldi	r24, 0x08	; 8
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	80 1b       	sub	r24, r16
     f8e:	91 09       	sbc	r25, r1
     f90:	20 e4       	ldi	r18, 0x40	; 64
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <LCD_draw_hline+0x6c>
     f96:	35 95       	asr	r19
     f98:	27 95       	ror	r18
     f9a:	8a 95       	dec	r24
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <LCD_draw_hline+0x68>
     f9e:	46 2d       	mov	r20, r6
     fa0:	50 e0       	ldi	r21, 0x00	; 0
     fa2:	ca 01       	movw	r24, r20
     fa4:	02 97       	sbiw	r24, 0x02	; 2
     fa6:	61 e9       	ldi	r22, 0x91	; 145
     fa8:	73 e0       	ldi	r23, 0x03	; 3
     faa:	dc 01       	movw	r26, r24
     fac:	aa 0f       	add	r26, r26
     fae:	bb 1f       	adc	r27, r27
     fb0:	a8 0f       	add	r26, r24
     fb2:	b9 1f       	adc	r27, r25
     fb4:	aa 0f       	add	r26, r26
     fb6:	bb 1f       	adc	r27, r27
     fb8:	aa 0d       	add	r26, r10
     fba:	bb 1d       	adc	r27, r11
     fbc:	a6 0f       	add	r26, r22
     fbe:	b7 1f       	adc	r27, r23
     fc0:	8c 91       	ld	r24, X
     fc2:	82 2b       	or	r24, r18
     fc4:	8c 93       	st	X, r24
		LcdCache [ X_84 -1][ y_48] = (0x40 >> (8 - dato_col)) | LcdCache [ X_84 -1][ y_48];
     fc6:	ca 01       	movw	r24, r20
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	8c 01       	movw	r16, r24
     fcc:	00 0f       	add	r16, r16
     fce:	11 1f       	adc	r17, r17
     fd0:	08 0f       	add	r16, r24
     fd2:	19 1f       	adc	r17, r25
     fd4:	00 0f       	add	r16, r16
     fd6:	11 1f       	adc	r17, r17
     fd8:	0a 0d       	add	r16, r10
     fda:	1b 1d       	adc	r17, r11
     fdc:	06 0f       	add	r16, r22
     fde:	17 1f       	adc	r17, r23
     fe0:	f8 01       	movw	r30, r16
     fe2:	80 81       	ld	r24, Z
     fe4:	82 2b       	or	r24, r18
     fe6:	80 83       	st	Z, r24
		LcdCache [ X_84   ][ y_48] = (0x40 >> (8 - dato_col)) | LcdCache [ X_84   ][ y_48];
     fe8:	fa 01       	movw	r30, r20
     fea:	ee 0f       	add	r30, r30
     fec:	ff 1f       	adc	r31, r31
     fee:	e4 0f       	add	r30, r20
     ff0:	f5 1f       	adc	r31, r21
     ff2:	ee 0f       	add	r30, r30
     ff4:	ff 1f       	adc	r31, r31
     ff6:	ea 0d       	add	r30, r10
     ff8:	fb 1d       	adc	r31, r11
     ffa:	e6 0f       	add	r30, r22
     ffc:	f7 1f       	adc	r31, r23
     ffe:	b0 80       	ld	r11, Z
    1000:	b2 2a       	or	r11, r18
    1002:	b0 82       	st	Z, r11
			
	
		LCD_write_col(X_84 -2 , y_48,LcdCache [ X_84 -2][ y_48]);
    1004:	86 2d       	mov	r24, r6
    1006:	82 50       	subi	r24, 0x02	; 2
    1008:	6c 2d       	mov	r22, r12
    100a:	4c 91       	ld	r20, X
    100c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
		LCD_write_col(X_84 -1 , y_48,LcdCache [ X_84 -1][ y_48]);
    1010:	86 2d       	mov	r24, r6
    1012:	81 50       	subi	r24, 0x01	; 1
    1014:	6c 2d       	mov	r22, r12
    1016:	f8 01       	movw	r30, r16
    1018:	40 81       	ld	r20, Z
    101a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
		LCD_write_col(X_84    , y_48,LcdCache [ X_84   ][ y_48]);
    101e:	86 2d       	mov	r24, r6
    1020:	6c 2d       	mov	r22, r12
    1022:	4b 2d       	mov	r20, r11
    1024:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>


}
    1028:	1f 91       	pop	r17
    102a:	0f 91       	pop	r16
    102c:	ff 90       	pop	r15
    102e:	ef 90       	pop	r14
    1030:	df 90       	pop	r13
    1032:	cf 90       	pop	r12
    1034:	bf 90       	pop	r11
    1036:	af 90       	pop	r10
    1038:	9f 90       	pop	r9
    103a:	7f 90       	pop	r7
    103c:	6f 90       	pop	r6
    103e:	08 95       	ret

00001040 <draw_lines_walls>:

}

//function to draw tree line wall
void draw_lines_walls()
{
    1040:	1f 93       	push	r17
    1042:	11 e0       	ldi	r17, 0x01	; 1
	int i,j;

	for (i=1;i<=12;i++)
	{
		LCD_draw_hline(i,7);
    1044:	81 2f       	mov	r24, r17
    1046:	67 e0       	ldi	r22, 0x07	; 7
    1048:	0e 94 97 07 	call	0xf2e	; 0xf2e <LCD_draw_hline>
    104c:	1f 5f       	subi	r17, 0xFF	; 255
//function to draw tree line wall
void draw_lines_walls()
{
	int i,j;

	for (i=1;i<=12;i++)
    104e:	1d 30       	cpi	r17, 0x0D	; 13
    1050:	c9 f7       	brne	.-14     	; 0x1044 <draw_lines_walls+0x4>
		LCD_draw_hline(i,7);
	}
	
	for (i=13;i<=26;i++)
	{
		LCD_draw_hline(i,12);
    1052:	81 2f       	mov	r24, r17
    1054:	6c e0       	ldi	r22, 0x0C	; 12
    1056:	0e 94 97 07 	call	0xf2e	; 0xf2e <LCD_draw_hline>
    105a:	1f 5f       	subi	r17, 0xFF	; 255
	for (i=1;i<=12;i++)
	{
		LCD_draw_hline(i,7);
	}
	
	for (i=13;i<=26;i++)
    105c:	1b 31       	cpi	r17, 0x1B	; 27
    105e:	c9 f7       	brne	.-14     	; 0x1052 <draw_lines_walls+0x12>
	}	
	
	
	for (j=0;j<=2;j++)
	{
		LCD_write_col(48,j,0xff);
    1060:	80 e3       	ldi	r24, 0x30	; 48
    1062:	60 e0       	ldi	r22, 0x00	; 0
    1064:	4f ef       	ldi	r20, 0xFF	; 255
    1066:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
    106a:	80 e3       	ldi	r24, 0x30	; 48
    106c:	61 e0       	ldi	r22, 0x01	; 1
    106e:	4f ef       	ldi	r20, 0xFF	; 255
    1070:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
    1074:	80 e3       	ldi	r24, 0x30	; 48
    1076:	62 e0       	ldi	r22, 0x02	; 2
    1078:	4f ef       	ldi	r20, 0xFF	; 255
    107a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_write_col>
	}
	
}
    107e:	1f 91       	pop	r17
    1080:	08 95       	ret

00001082 <main>:

}

//function main
int main(void)
{
    1082:	2f 92       	push	r2
    1084:	3f 92       	push	r3
    1086:	4f 92       	push	r4
    1088:	5f 92       	push	r5
    108a:	6f 92       	push	r6
    108c:	7f 92       	push	r7
    108e:	8f 92       	push	r8
    1090:	9f 92       	push	r9
    1092:	af 92       	push	r10
    1094:	bf 92       	push	r11
    1096:	cf 92       	push	r12
    1098:	df 92       	push	r13
    109a:	ef 92       	push	r14
    109c:	ff 92       	push	r15
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
}

//function ini port input/output
void port_ini()
{
	DDRF = 0b10001110;
    10a6:	8e e8       	ldi	r24, 0x8E	; 142
    10a8:	80 bb       	out	0x10, r24	; 16
	DDRB = 0x7c;
    10aa:	8c e7       	ldi	r24, 0x7C	; 124
    10ac:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xfc;
    10ae:	8c ef       	ldi	r24, 0xFC	; 252
    10b0:	8a b9       	out	0x0a, r24	; 10
int main(void)
{
	static int i,j,c,s;
	
	port_ini();
	LCD_init();       //LCD initialization
    10b2:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_init>
	LCD_clear();
    10b6:	0e 94 88 00 	call	0x110	; 0x110 <LCD_clear>
	
	initial_message();	
    10ba:	0e 94 3f 01 	call	0x27e	; 0x27e <initial_message>
    10be:	20 e2       	ldi	r18, 0x20	; 32
    10c0:	3e e4       	ldi	r19, 0x4E	; 78
    10c2:	48 ec       	ldi	r20, 0xC8	; 200
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	ca 01       	movw	r24, r20
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	f1 f7       	brne	.-4      	; 0x10c8 <main+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10cc:	21 50       	subi	r18, 0x01	; 1
    10ce:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d0:	d1 f7       	brne	.-12     	; 0x10c6 <main+0x44>
		
	_delay_ms(2000);		
	LCD_clear(); 	
    10d2:	0e 94 88 00 	call	0x110	; 0x110 <LCD_clear>
		
	snake_game_ini();
    10d6:	0e 94 90 06 	call	0xd20	; 0xd20 <snake_game_ini>
	seed = 100;		
    10da:	84 e6       	ldi	r24, 0x64	; 100
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	a0 e0       	ldi	r26, 0x00	; 0
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	80 93 84 03 	sts	0x0384, r24
    10e6:	90 93 85 03 	sts	0x0385, r25
    10ea:	a0 93 86 03 	sts	0x0386, r26
    10ee:	b0 93 87 03 	sts	0x0387, r27
	ini_ramdom =0;	//ini ramdom off
    10f2:	10 92 7a 03 	sts	0x037A, r1
	
	x_game = 10;
    10f6:	8a e0       	ldi	r24, 0x0A	; 10
    10f8:	80 93 8d 03 	sts	0x038D, r24
	y_game = 10;
    10fc:	80 93 8e 03 	sts	0x038E, r24
	
	score_uni = 0;
    1100:	10 92 88 03 	sts	0x0388, r1
	score_ten = 0;
    1104:	10 92 89 03 	sts	0x0389, r1
	score =0;
    1108:	10 92 8a 03 	sts	0x038A, r1
	
	lines_walls =0;  //ini wall off
    110c:	10 92 83 03 	sts	0x0383, r1
	
	live = 5;	//live in 5
    1110:	85 e0       	ldi	r24, 0x05	; 5
    1112:	80 93 8b 03 	sts	0x038B, r24
	
	delay_game = 200;
    1116:	88 ec       	ldi	r24, 0xC8	; 200
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	90 93 82 03 	sts	0x0382, r25
    111e:	80 93 81 03 	sts	0x0381, r24
		
	//show ini display score and live	
	LCD_gotoXY(0,0);
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_gotoXY>
	LCD_write_char(score_ten + 0x30);
    112a:	80 91 89 03 	lds	r24, 0x0389
    112e:	80 5d       	subi	r24, 0xD0	; 208
    1130:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_char>
	LCD_write_char(score_uni + 0x30);
    1134:	80 91 88 03 	lds	r24, 0x0388
    1138:	80 5d       	subi	r24, 0xD0	; 208
    113a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_char>
	
	LCD_gotoXY(13,0);
    113e:	8d e0       	ldi	r24, 0x0D	; 13
    1140:	60 e0       	ldi	r22, 0x00	; 0
    1142:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_gotoXY>
	LCD_write_char('(');
    1146:	88 e2       	ldi	r24, 0x28	; 40
    1148:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_char>
	LCD_write_char(live + 0x30);
    114c:	80 91 8b 03 	lds	r24, 0x038B
    1150:	80 5d       	subi	r24, 0xD0	; 208
    1152:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_char>
	LCD_write_char(')');
    1156:	89 e2       	ldi	r24, 0x29	; 41
    1158:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_char>


//Adc initialize port
void InitADC()
{
	ADMUX = (1<<REFS0);                         			// For Aref=AVcc;
    115c:	80 e4       	ldi	r24, 0x40	; 64
    115e:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Rrescalar div factor =128
    1162:	87 e8       	ldi	r24, 0x87	; 135
    1164:	80 93 7a 00 	sts	0x007A, r24
		}
		
		if ((direc != ini) && (ini_ramdom ==0))
		{
			ramdom_food();
			ini_ramdom = 1;
    1168:	99 24       	eor	r9, r9
    116a:	93 94       	inc	r9
			
			ramdom_food(); //new food
		}
		
		//check cross body happens
		for (s=2;s<snake_len-1;s++)
    116c:	82 e0       	ldi	r24, 0x02	; 2
    116e:	48 2e       	mov	r4, r24
    1170:	51 2c       	mov	r5, r1
    1172:	c8 ec       	ldi	r28, 0xC8	; 200
    1174:	d0 e0       	ldi	r29, 0x00	; 0
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    1176:	01 e0       	ldi	r16, 0x01	; 1
    1178:	20 2e       	mov	r2, r16
    117a:	31 2c       	mov	r3, r1
			}			

			Lcd_snake_x3[0]--;
			if (Lcd_snake_x3[0] <= 0)
			{
				Lcd_snake_x3[0] = 27;
    117c:	1b e1       	ldi	r17, 0x1B	; 27
    117e:	81 2e       	mov	r8, r17

			//the head position of the snake
			Lcd_snake_y3[0]++;
			if (Lcd_snake_y3[0] >= 16)
			{
				Lcd_snake_y3[0] = 4;
    1180:	b4 e0       	ldi	r27, 0x04	; 4
    1182:	6b 2e       	mov	r6, r27
    1184:	71 2c       	mov	r7, r1

//while main all the program run here
    while(1)
    {
		 
		seed = seed + 1;
    1186:	80 91 84 03 	lds	r24, 0x0384
    118a:	90 91 85 03 	lds	r25, 0x0385
    118e:	a0 91 86 03 	lds	r26, 0x0386
    1192:	b0 91 87 03 	lds	r27, 0x0387
    1196:	01 96       	adiw	r24, 0x01	; 1
    1198:	a1 1d       	adc	r26, r1
    119a:	b1 1d       	adc	r27, r1
    119c:	80 93 84 03 	sts	0x0384, r24
    11a0:	90 93 85 03 	sts	0x0385, r25
    11a4:	a0 93 86 03 	sts	0x0386, r26
    11a8:	b0 93 87 03 	sts	0x0387, r27
		
		if (seed> 100000)
    11ac:	81 5a       	subi	r24, 0xA1	; 161
    11ae:	96 48       	sbci	r25, 0x86	; 134
    11b0:	a1 40       	sbci	r26, 0x01	; 1
    11b2:	b0 40       	sbci	r27, 0x00	; 0
    11b4:	44 f0       	brlt	.+16     	; 0x11c6 <main+0x144>
		{
			seed = 0;
    11b6:	10 92 84 03 	sts	0x0384, r1
    11ba:	10 92 85 03 	sts	0x0385, r1
    11be:	10 92 86 03 	sts	0x0386, r1
    11c2:	10 92 87 03 	sts	0x0387, r1
		}
		
		if ((direc != ini) && (ini_ramdom ==0))
    11c6:	80 91 73 03 	lds	r24, 0x0373
    11ca:	84 30       	cpi	r24, 0x04	; 4
    11cc:	41 f0       	breq	.+16     	; 0x11de <main+0x15c>
    11ce:	80 91 7a 03 	lds	r24, 0x037A
    11d2:	88 23       	and	r24, r24
    11d4:	21 f4       	brne	.+8      	; 0x11de <main+0x15c>
		{
			ramdom_food();
    11d6:	0e 94 2c 07 	call	0xe58	; 0xe58 <ramdom_food>
			ini_ramdom = 1;
    11da:	90 92 7a 03 	sts	0x037A, r9
		}
		
	if (direc != ini) //if no ini nothin happens
    11de:	80 91 73 03 	lds	r24, 0x0373
    11e2:	84 30       	cpi	r24, 0x04	; 4
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <main+0x166>
    11e6:	1f c3       	rjmp	.+1598   	; 0x1826 <main+0x7a4>
	{
	
		check_adc();
    11e8:	0e 94 85 01 	call	0x30a	; 0x30a <check_adc>
	
	
		//verified if snake take food
		if ((Lcd_snake_x3[0] == x_rand_food ) && (Lcd_snake_y3[0] == y_rand_food))
    11ec:	90 91 89 05 	lds	r25, 0x0589
    11f0:	80 91 74 03 	lds	r24, 0x0374
    11f4:	98 17       	cp	r25, r24
    11f6:	09 f0       	breq	.+2      	; 0x11fa <main+0x178>
    11f8:	55 c0       	rjmp	.+170    	; 0x12a4 <main+0x222>
    11fa:	80 91 8c 03 	lds	r24, 0x038C
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	20 91 a7 05 	lds	r18, 0x05A7
    1204:	30 91 a8 05 	lds	r19, 0x05A8
    1208:	28 17       	cp	r18, r24
    120a:	39 07       	cpc	r19, r25
    120c:	09 f0       	breq	.+2      	; 0x1210 <main+0x18e>
    120e:	4a c0       	rjmp	.+148    	; 0x12a4 <main+0x222>
		{
			
			last_position_y = Lcd_snake_y3[snake_len-1]; 	
    1210:	60 91 cf 05 	lds	r22, 0x05CF
    1214:	86 2f       	mov	r24, r22
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	ac 01       	movw	r20, r24
    121a:	41 50       	subi	r20, 0x01	; 1
    121c:	50 40       	sbci	r21, 0x00	; 0
    121e:	fa 01       	movw	r30, r20
    1220:	ee 0f       	add	r30, r30
    1222:	ff 1f       	adc	r31, r31
    1224:	e9 55       	subi	r30, 0x59	; 89
    1226:	fa 4f       	sbci	r31, 0xFA	; 250
    1228:	20 81       	ld	r18, Z
    122a:	20 93 90 03 	sts	0x0390, r18
			last_position_x = Lcd_snake_x3[snake_len-1];	
    122e:	fa 01       	movw	r30, r20
    1230:	e7 57       	subi	r30, 0x77	; 119
    1232:	fa 4f       	sbci	r31, 0xFA	; 250
    1234:	20 81       	ld	r18, Z
    1236:	20 93 8f 03 	sts	0x038F, r18

}

//function main
int main(void)
{
    123a:	02 97       	sbiw	r24, 0x02	; 2
    123c:	fc 01       	movw	r30, r24
    123e:	ee 0f       	add	r30, r30
    1240:	ff 1f       	adc	r31, r31
    1242:	e9 55       	subi	r30, 0x59	; 89
    1244:	fa 4f       	sbci	r31, 0xFA	; 250
    1246:	dc 01       	movw	r26, r24
    1248:	a7 57       	subi	r26, 0x77	; 119
    124a:	ba 4f       	sbci	r27, 0xFA	; 250
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	0c c0       	rjmp	.+24     	; 0x126a <main+0x1e8>
			last_position_y = Lcd_snake_y3[snake_len-1]; 	
			last_position_x = Lcd_snake_x3[snake_len-1];	
			
			for (s=0;s<snake_len-1;s++)
			{
				Lcd_snake_y3[snake_len-1 -s] = Lcd_snake_y3[snake_len-2-s];
    1252:	80 81       	ld	r24, Z
    1254:	91 81       	ldd	r25, Z+1	; 0x01
    1256:	93 83       	std	Z+3, r25	; 0x03
    1258:	82 83       	std	Z+2, r24	; 0x02
				Lcd_snake_x3[snake_len-1 -s] = Lcd_snake_x3[snake_len-2-s];
    125a:	8c 91       	ld	r24, X
    125c:	11 96       	adiw	r26, 0x01	; 1
    125e:	8c 93       	st	X, r24
    1260:	11 97       	sbiw	r26, 0x01	; 1
    1262:	2f 5f       	subi	r18, 0xFF	; 255
    1264:	3f 4f       	sbci	r19, 0xFF	; 255
    1266:	32 97       	sbiw	r30, 0x02	; 2
    1268:	11 97       	sbiw	r26, 0x01	; 1
		{
			
			last_position_y = Lcd_snake_y3[snake_len-1]; 	
			last_position_x = Lcd_snake_x3[snake_len-1];	
			
			for (s=0;s<snake_len-1;s++)
    126a:	24 17       	cp	r18, r20
    126c:	35 07       	cpc	r19, r21
    126e:	8c f3       	brlt	.-30     	; 0x1252 <main+0x1d0>
    1270:	30 93 7c 03 	sts	0x037C, r19
    1274:	20 93 7b 03 	sts	0x037B, r18
				Lcd_snake_x3[snake_len-1 -s] = Lcd_snake_x3[snake_len-2-s];

			}
	
			
			snake_len = snake_len +1; //snake grow
    1278:	6f 5f       	subi	r22, 0xFF	; 255
    127a:	60 93 cf 05 	sts	0x05CF, r22
			
			LCD_write_snake();
    127e:	0e 94 71 06 	call	0xce2	; 0xce2 <LCD_write_snake>
			LCD_delete_sprite(last_position_x,last_position_y);
    1282:	80 91 8f 03 	lds	r24, 0x038F
    1286:	60 91 90 03 	lds	r22, 0x0390
    128a:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_delete_sprite>
    128e:	88 ee       	ldi	r24, 0xE8	; 232
    1290:	93 e0       	ldi	r25, 0x03	; 3
    1292:	fe 01       	movw	r30, r28
    1294:	31 97       	sbiw	r30, 0x01	; 1
    1296:	f1 f7       	brne	.-4      	; 0x1294 <main+0x212>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1298:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    129a:	d9 f7       	brne	.-10     	; 0x1292 <main+0x210>
			_delay_ms(100);				
			
			
			draw_score(); //update score
    129c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <draw_score>
			
			
			ramdom_food(); //new food
    12a0:	0e 94 2c 07 	call	0xe58	; 0xe58 <ramdom_food>
		}
		
		//check cross body happens
		for (s=2;s<snake_len-1;s++)
    12a4:	50 92 7c 03 	sts	0x037C, r5
    12a8:	40 92 7b 03 	sts	0x037B, r4
    12ac:	20 c0       	rjmp	.+64     	; 0x12ee <main+0x26c>
		{
			if ((Lcd_snake_x3[0] == Lcd_snake_x3[s] ) && (Lcd_snake_y3[0] == Lcd_snake_y3[s])) 
    12ae:	fd 01       	movw	r30, r26
    12b0:	e7 57       	subi	r30, 0x77	; 119
    12b2:	fa 4f       	sbci	r31, 0xFA	; 250
    12b4:	90 91 89 05 	lds	r25, 0x0589
    12b8:	80 81       	ld	r24, Z
    12ba:	98 17       	cp	r25, r24
    12bc:	79 f4       	brne	.+30     	; 0x12dc <main+0x25a>
    12be:	aa 0f       	add	r26, r26
    12c0:	bb 1f       	adc	r27, r27
    12c2:	a9 55       	subi	r26, 0x59	; 89
    12c4:	ba 4f       	sbci	r27, 0xFA	; 250
    12c6:	20 91 a7 05 	lds	r18, 0x05A7
    12ca:	30 91 a8 05 	lds	r19, 0x05A8
    12ce:	8d 91       	ld	r24, X+
    12d0:	9c 91       	ld	r25, X
    12d2:	28 17       	cp	r18, r24
    12d4:	39 07       	cpc	r19, r25
    12d6:	11 f4       	brne	.+4      	; 0x12dc <main+0x25a>
			{
				
				live_lose(); //lose one live
    12d8:	0e 94 0f 07 	call	0xe1e	; 0xe1e <live_lose>
			
			ramdom_food(); //new food
		}
		
		//check cross body happens
		for (s=2;s<snake_len-1;s++)
    12dc:	80 91 7b 03 	lds	r24, 0x037B
    12e0:	90 91 7c 03 	lds	r25, 0x037C
    12e4:	01 96       	adiw	r24, 0x01	; 1
    12e6:	90 93 7c 03 	sts	0x037C, r25
    12ea:	80 93 7b 03 	sts	0x037B, r24
    12ee:	a0 91 7b 03 	lds	r26, 0x037B
    12f2:	b0 91 7c 03 	lds	r27, 0x037C
    12f6:	80 91 cf 05 	lds	r24, 0x05CF
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	a8 17       	cp	r26, r24
    1300:	b9 07       	cpc	r27, r25
    1302:	ac f2       	brlt	.-86     	; 0x12ae <main+0x22c>
				live_lose(); //lose one live
				
			}
		}
		
		if (lines_walls == 1) //check if wall is present display
    1304:	80 91 83 03 	lds	r24, 0x0383
    1308:	81 30       	cpi	r24, 0x01	; 1
    130a:	09 f0       	breq	.+2      	; 0x130e <main+0x28c>
    130c:	68 c0       	rjmp	.+208    	; 0x13de <main+0x35c>
		{
		
			draw_lines_walls(); //update wall in display
    130e:	0e 94 20 08 	call	0x1040	; 0x1040 <draw_lines_walls>
		
			for (i=1;i<=12;i++)
    1312:	30 92 80 03 	sts	0x0380, r3
    1316:	20 92 7f 03 	sts	0x037F, r2
    131a:	17 c0       	rjmp	.+46     	; 0x134a <main+0x2c8>
			{
				
				if ((Lcd_snake_x3[0] == i) && (Lcd_snake_y3[0] == 7))
    131c:	80 91 89 05 	lds	r24, 0x0589
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	82 17       	cp	r24, r18
    1324:	93 07       	cpc	r25, r19
    1326:	41 f4       	brne	.+16     	; 0x1338 <main+0x2b6>
    1328:	80 91 a7 05 	lds	r24, 0x05A7
    132c:	90 91 a8 05 	lds	r25, 0x05A8
    1330:	07 97       	sbiw	r24, 0x07	; 7
    1332:	11 f4       	brne	.+4      	; 0x1338 <main+0x2b6>
				{
					live_lose();
    1334:	0e 94 0f 07 	call	0xe1e	; 0xe1e <live_lose>
		if (lines_walls == 1) //check if wall is present display
		{
		
			draw_lines_walls(); //update wall in display
		
			for (i=1;i<=12;i++)
    1338:	80 91 7f 03 	lds	r24, 0x037F
    133c:	90 91 80 03 	lds	r25, 0x0380
    1340:	01 96       	adiw	r24, 0x01	; 1
    1342:	90 93 80 03 	sts	0x0380, r25
    1346:	80 93 7f 03 	sts	0x037F, r24
    134a:	20 91 7f 03 	lds	r18, 0x037F
    134e:	30 91 80 03 	lds	r19, 0x0380
    1352:	2d 30       	cpi	r18, 0x0D	; 13
    1354:	31 05       	cpc	r19, r1
    1356:	14 f3       	brlt	.-60     	; 0x131c <main+0x29a>
				{
					live_lose();
				}
			}
	
			for (i=13;i<=26;i++)
    1358:	8d e0       	ldi	r24, 0x0D	; 13
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	13 c0       	rjmp	.+38     	; 0x1384 <main+0x302>
			{
				if ((Lcd_snake_x3[0] == i) && (Lcd_snake_y3[0] == 12))
    135e:	80 91 89 05 	lds	r24, 0x0589
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	82 17       	cp	r24, r18
    1366:	93 07       	cpc	r25, r19
    1368:	41 f4       	brne	.+16     	; 0x137a <main+0x2f8>
    136a:	80 91 a7 05 	lds	r24, 0x05A7
    136e:	90 91 a8 05 	lds	r25, 0x05A8
    1372:	0c 97       	sbiw	r24, 0x0c	; 12
    1374:	11 f4       	brne	.+4      	; 0x137a <main+0x2f8>
				{
									
					live_lose();
    1376:	0e 94 0f 07 	call	0xe1e	; 0xe1e <live_lose>
				{
					live_lose();
				}
			}
	
			for (i=13;i<=26;i++)
    137a:	80 91 7f 03 	lds	r24, 0x037F
    137e:	90 91 80 03 	lds	r25, 0x0380
    1382:	01 96       	adiw	r24, 0x01	; 1
    1384:	90 93 80 03 	sts	0x0380, r25
    1388:	80 93 7f 03 	sts	0x037F, r24
    138c:	20 91 7f 03 	lds	r18, 0x037F
    1390:	30 91 80 03 	lds	r19, 0x0380
    1394:	2b 31       	cpi	r18, 0x1B	; 27
    1396:	31 05       	cpc	r19, r1
    1398:	14 f3       	brlt	.-60     	; 0x135e <main+0x2dc>
									
					live_lose();
				}
			}

			for (j=4;j<=8;j++)
    139a:	70 92 7e 03 	sts	0x037E, r7
    139e:	60 92 7d 03 	sts	0x037D, r6
    13a2:	16 c0       	rjmp	.+44     	; 0x13d0 <main+0x34e>
			{
				
				if ((Lcd_snake_x3[0] == 16) && (Lcd_snake_y3[0] == j))
    13a4:	80 91 89 05 	lds	r24, 0x0589
    13a8:	80 31       	cpi	r24, 0x10	; 16
    13aa:	49 f4       	brne	.+18     	; 0x13be <main+0x33c>
    13ac:	80 91 a7 05 	lds	r24, 0x05A7
    13b0:	90 91 a8 05 	lds	r25, 0x05A8
    13b4:	82 17       	cp	r24, r18
    13b6:	93 07       	cpc	r25, r19
    13b8:	11 f4       	brne	.+4      	; 0x13be <main+0x33c>
				{
									
					live_lose();
    13ba:	0e 94 0f 07 	call	0xe1e	; 0xe1e <live_lose>
									
					live_lose();
				}
			}

			for (j=4;j<=8;j++)
    13be:	80 91 7d 03 	lds	r24, 0x037D
    13c2:	90 91 7e 03 	lds	r25, 0x037E
    13c6:	01 96       	adiw	r24, 0x01	; 1
    13c8:	90 93 7e 03 	sts	0x037E, r25
    13cc:	80 93 7d 03 	sts	0x037D, r24
    13d0:	20 91 7d 03 	lds	r18, 0x037D
    13d4:	30 91 7e 03 	lds	r19, 0x037E
    13d8:	29 30       	cpi	r18, 0x09	; 9
    13da:	31 05       	cpc	r19, r1
    13dc:	1c f3       	brlt	.-58     	; 0x13a4 <main+0x322>
		
		
		}
		
		
		if (direc == up) //in direction up process move 		
    13de:	80 91 73 03 	lds	r24, 0x0373
    13e2:	88 23       	and	r24, r24
    13e4:	09 f0       	breq	.+2      	; 0x13e8 <main+0x366>
    13e6:	88 c0       	rjmp	.+272    	; 0x14f8 <main+0x476>
		{
		
			last_position_y = Lcd_snake_y3[snake_len-1]; 	
    13e8:	80 91 cf 05 	lds	r24, 0x05CF
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	ac 01       	movw	r20, r24
    13f0:	41 50       	subi	r20, 0x01	; 1
    13f2:	50 40       	sbci	r21, 0x00	; 0
    13f4:	fa 01       	movw	r30, r20
    13f6:	ee 0f       	add	r30, r30
    13f8:	ff 1f       	adc	r31, r31
    13fa:	e9 55       	subi	r30, 0x59	; 89
    13fc:	fa 4f       	sbci	r31, 0xFA	; 250
    13fe:	20 81       	ld	r18, Z
    1400:	20 93 90 03 	sts	0x0390, r18
			last_position_x = Lcd_snake_x3[snake_len-1];	
    1404:	fa 01       	movw	r30, r20
    1406:	e7 57       	subi	r30, 0x77	; 119
    1408:	fa 4f       	sbci	r31, 0xFA	; 250
    140a:	20 81       	ld	r18, Z
    140c:	20 93 8f 03 	sts	0x038F, r18

}

//function main
int main(void)
{
    1410:	02 97       	sbiw	r24, 0x02	; 2
    1412:	fc 01       	movw	r30, r24
    1414:	ee 0f       	add	r30, r30
    1416:	ff 1f       	adc	r31, r31
    1418:	e9 55       	subi	r30, 0x59	; 89
    141a:	fa 4f       	sbci	r31, 0xFA	; 250
    141c:	dc 01       	movw	r26, r24
    141e:	a7 57       	subi	r26, 0x77	; 119
    1420:	ba 4f       	sbci	r27, 0xFA	; 250
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	0c c0       	rjmp	.+24     	; 0x1440 <main+0x3be>
			last_position_y = Lcd_snake_y3[snake_len-1]; 	
			last_position_x = Lcd_snake_x3[snake_len-1];	
			
			for (s=0;s<snake_len-1;s++)
			{
				Lcd_snake_y3[snake_len-1 -s] = Lcd_snake_y3[snake_len-2-s];
    1428:	80 81       	ld	r24, Z
    142a:	91 81       	ldd	r25, Z+1	; 0x01
    142c:	93 83       	std	Z+3, r25	; 0x03
    142e:	82 83       	std	Z+2, r24	; 0x02
				Lcd_snake_x3[snake_len-1 -s] = Lcd_snake_x3[snake_len-2-s];
    1430:	8c 91       	ld	r24, X
    1432:	11 96       	adiw	r26, 0x01	; 1
    1434:	8c 93       	st	X, r24
    1436:	11 97       	sbiw	r26, 0x01	; 1
    1438:	2f 5f       	subi	r18, 0xFF	; 255
    143a:	3f 4f       	sbci	r19, 0xFF	; 255
    143c:	32 97       	sbiw	r30, 0x02	; 2
    143e:	11 97       	sbiw	r26, 0x01	; 1
		{
		
			last_position_y = Lcd_snake_y3[snake_len-1]; 	
			last_position_x = Lcd_snake_x3[snake_len-1];	
			
			for (s=0;s<snake_len-1;s++)
    1440:	24 17       	cp	r18, r20
    1442:	35 07       	cpc	r19, r21
    1444:	8c f3       	brlt	.-30     	; 0x1428 <main+0x3a6>
    1446:	30 93 7c 03 	sts	0x037C, r19
    144a:	20 93 7b 03 	sts	0x037B, r18
				Lcd_snake_y3[snake_len-1 -s] = Lcd_snake_y3[snake_len-2-s];
				Lcd_snake_x3[snake_len-1 -s] = Lcd_snake_x3[snake_len-2-s];

			}
			
			Lcd_snake_y3[0]--;
    144e:	80 91 a7 05 	lds	r24, 0x05A7
    1452:	90 91 a8 05 	lds	r25, 0x05A8
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	90 93 a8 05 	sts	0x05A8, r25
    145c:	80 93 a7 05 	sts	0x05A7, r24
			if (Lcd_snake_y3[0] < 4)
    1460:	04 97       	sbiw	r24, 0x04	; 4
    1462:	34 f4       	brge	.+12     	; 0x1470 <main+0x3ee>
			{
				Lcd_snake_y3[0] = 16;
    1464:	80 e1       	ldi	r24, 0x10	; 16
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	90 93 a8 05 	sts	0x05A8, r25
    146c:	80 93 a7 05 	sts	0x05A7, r24
			}			
			
			
			LCD_write_snake();
    1470:	0e 94 71 06 	call	0xce2	; 0xce2 <LCD_write_snake>
			LCD_delete_sprite(last_position_x,last_position_y);
    1474:	80 91 8f 03 	lds	r24, 0x038F
    1478:	60 91 90 03 	lds	r22, 0x0390
    147c:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_delete_sprite>
			_delay_ms(delay_game);				
    1480:	60 91 81 03 	lds	r22, 0x0381
    1484:	70 91 82 03 	lds	r23, 0x0382
    1488:	88 27       	eor	r24, r24
    148a:	77 fd       	sbrc	r23, 7
    148c:	80 95       	com	r24
    148e:	98 2f       	mov	r25, r24
    1490:	0e 94 c5 0c 	call	0x198a	; 0x198a <__floatsisf>
    1494:	5b 01       	movw	r10, r22
    1496:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	4a ef       	ldi	r20, 0xFA	; 250
    149e:	54 e4       	ldi	r21, 0x44	; 68
    14a0:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__mulsf3>
    14a4:	7b 01       	movw	r14, r22
    14a6:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	40 e8       	ldi	r20, 0x80	; 128
    14ae:	5f e3       	ldi	r21, 0x3F	; 63
    14b0:	0e 94 93 0c 	call	0x1926	; 0x1926 <__cmpsf2>
    14b4:	88 23       	and	r24, r24
    14b6:	0c f4       	brge	.+2      	; 0x14ba <main+0x438>
    14b8:	8e c1       	rjmp	.+796    	; 0x17d6 <main+0x754>
		__ticks = 1;
	else if (__tmp > 65535)
    14ba:	c8 01       	movw	r24, r16
    14bc:	b7 01       	movw	r22, r14
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	3f ef       	ldi	r19, 0xFF	; 255
    14c2:	4f e7       	ldi	r20, 0x7F	; 127
    14c4:	57 e4       	ldi	r21, 0x47	; 71
    14c6:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__gesf2>
    14ca:	18 16       	cp	r1, r24
    14cc:	0c f0       	brlt	.+2      	; 0x14d0 <main+0x44e>
    14ce:	a4 c1       	rjmp	.+840    	; 0x1818 <main+0x796>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d0:	c6 01       	movw	r24, r12
    14d2:	b5 01       	movw	r22, r10
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e2       	ldi	r20, 0x20	; 32
    14da:	51 e4       	ldi	r21, 0x41	; 65
    14dc:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__mulsf3>
    14e0:	0e 94 97 0c 	call	0x192e	; 0x192e <__fixunssfsi>
    14e4:	05 c0       	rjmp	.+10     	; 0x14f0 <main+0x46e>
    14e6:	ce 01       	movw	r24, r28
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	f1 f7       	brne	.-4      	; 0x14e8 <main+0x466>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ec:	61 50       	subi	r22, 0x01	; 1
    14ee:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f0:	61 15       	cp	r22, r1
    14f2:	71 05       	cpc	r23, r1
    14f4:	c1 f7       	brne	.-16     	; 0x14e6 <main+0x464>
    14f6:	97 c1       	rjmp	.+814    	; 0x1826 <main+0x7a4>
		
		}
		else if (direc == down) //in direction down process move 		
    14f8:	81 30       	cpi	r24, 0x01	; 1
    14fa:	09 f0       	breq	.+2      	; 0x14fe <main+0x47c>
    14fc:	86 c0       	rjmp	.+268    	; 0x160a <main+0x588>
		{
		
			//save the last position to delete	
			last_position_y = Lcd_snake_y3[snake_len-1]; 	
    14fe:	80 91 cf 05 	lds	r24, 0x05CF
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	ac 01       	movw	r20, r24
    1506:	41 50       	subi	r20, 0x01	; 1
    1508:	50 40       	sbci	r21, 0x00	; 0
    150a:	fa 01       	movw	r30, r20
    150c:	ee 0f       	add	r30, r30
    150e:	ff 1f       	adc	r31, r31
    1510:	e9 55       	subi	r30, 0x59	; 89
    1512:	fa 4f       	sbci	r31, 0xFA	; 250
    1514:	20 81       	ld	r18, Z
    1516:	20 93 90 03 	sts	0x0390, r18
			last_position_x = Lcd_snake_x3[snake_len-1];
    151a:	fa 01       	movw	r30, r20
    151c:	e7 57       	subi	r30, 0x77	; 119
    151e:	fa 4f       	sbci	r31, 0xFA	; 250
    1520:	20 81       	ld	r18, Z
    1522:	20 93 8f 03 	sts	0x038F, r18

}

//function main
int main(void)
{
    1526:	02 97       	sbiw	r24, 0x02	; 2
    1528:	fc 01       	movw	r30, r24
    152a:	ee 0f       	add	r30, r30
    152c:	ff 1f       	adc	r31, r31
    152e:	e9 55       	subi	r30, 0x59	; 89
    1530:	fa 4f       	sbci	r31, 0xFA	; 250
    1532:	dc 01       	movw	r26, r24
    1534:	a7 57       	subi	r26, 0x77	; 119
    1536:	ba 4f       	sbci	r27, 0xFA	; 250
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	0c c0       	rjmp	.+24     	; 0x1556 <main+0x4d4>
	
			
			//fill the snake new value
			for (s=0;s<snake_len-1;s++)
			{
				Lcd_snake_y3[snake_len-1 -s] = Lcd_snake_y3[snake_len-2-s];
    153e:	80 81       	ld	r24, Z
    1540:	91 81       	ldd	r25, Z+1	; 0x01
    1542:	93 83       	std	Z+3, r25	; 0x03
    1544:	82 83       	std	Z+2, r24	; 0x02
				Lcd_snake_x3[snake_len-1 -s] = Lcd_snake_x3[snake_len-2-s];
    1546:	8c 91       	ld	r24, X
    1548:	11 96       	adiw	r26, 0x01	; 1
    154a:	8c 93       	st	X, r24
    154c:	11 97       	sbiw	r26, 0x01	; 1
    154e:	2f 5f       	subi	r18, 0xFF	; 255
    1550:	3f 4f       	sbci	r19, 0xFF	; 255
    1552:	32 97       	sbiw	r30, 0x02	; 2
    1554:	11 97       	sbiw	r26, 0x01	; 1
			last_position_y = Lcd_snake_y3[snake_len-1]; 	
			last_position_x = Lcd_snake_x3[snake_len-1];
	
			
			//fill the snake new value
			for (s=0;s<snake_len-1;s++)
    1556:	24 17       	cp	r18, r20
    1558:	35 07       	cpc	r19, r21
    155a:	8c f3       	brlt	.-30     	; 0x153e <main+0x4bc>
    155c:	30 93 7c 03 	sts	0x037C, r19
    1560:	20 93 7b 03 	sts	0x037B, r18
				Lcd_snake_x3[snake_len-1 -s] = Lcd_snake_x3[snake_len-2-s];

			}			

			//the head position of the snake
			Lcd_snake_y3[0]++;
    1564:	80 91 a7 05 	lds	r24, 0x05A7
    1568:	90 91 a8 05 	lds	r25, 0x05A8
    156c:	01 96       	adiw	r24, 0x01	; 1
    156e:	90 93 a8 05 	sts	0x05A8, r25
    1572:	80 93 a7 05 	sts	0x05A7, r24
			if (Lcd_snake_y3[0] >= 16)
    1576:	40 97       	sbiw	r24, 0x10	; 16
    1578:	24 f0       	brlt	.+8      	; 0x1582 <main+0x500>
			{
				Lcd_snake_y3[0] = 4;
    157a:	70 92 a8 05 	sts	0x05A8, r7
    157e:	60 92 a7 05 	sts	0x05A7, r6
			}
			
			
			LCD_write_snake();
    1582:	0e 94 71 06 	call	0xce2	; 0xce2 <LCD_write_snake>
			LCD_delete_sprite(last_position_x,last_position_y);
    1586:	80 91 8f 03 	lds	r24, 0x038F
    158a:	60 91 90 03 	lds	r22, 0x0390
    158e:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_delete_sprite>
			_delay_ms(delay_game);				
    1592:	60 91 81 03 	lds	r22, 0x0381
    1596:	70 91 82 03 	lds	r23, 0x0382
    159a:	88 27       	eor	r24, r24
    159c:	77 fd       	sbrc	r23, 7
    159e:	80 95       	com	r24
    15a0:	98 2f       	mov	r25, r24
    15a2:	0e 94 c5 0c 	call	0x198a	; 0x198a <__floatsisf>
    15a6:	5b 01       	movw	r10, r22
    15a8:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	4a ef       	ldi	r20, 0xFA	; 250
    15b0:	54 e4       	ldi	r21, 0x44	; 68
    15b2:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__mulsf3>
    15b6:	7b 01       	movw	r14, r22
    15b8:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e8       	ldi	r20, 0x80	; 128
    15c0:	5f e3       	ldi	r21, 0x3F	; 63
    15c2:	0e 94 93 0c 	call	0x1926	; 0x1926 <__cmpsf2>
    15c6:	88 23       	and	r24, r24
    15c8:	0c f4       	brge	.+2      	; 0x15cc <main+0x54a>
    15ca:	05 c1       	rjmp	.+522    	; 0x17d6 <main+0x754>
		__ticks = 1;
	else if (__tmp > 65535)
    15cc:	c8 01       	movw	r24, r16
    15ce:	b7 01       	movw	r22, r14
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	3f ef       	ldi	r19, 0xFF	; 255
    15d4:	4f e7       	ldi	r20, 0x7F	; 127
    15d6:	57 e4       	ldi	r21, 0x47	; 71
    15d8:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__gesf2>
    15dc:	18 16       	cp	r1, r24
    15de:	0c f0       	brlt	.+2      	; 0x15e2 <main+0x560>
    15e0:	1b c1       	rjmp	.+566    	; 0x1818 <main+0x796>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e2:	c6 01       	movw	r24, r12
    15e4:	b5 01       	movw	r22, r10
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	40 e2       	ldi	r20, 0x20	; 32
    15ec:	51 e4       	ldi	r21, 0x41	; 65
    15ee:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__mulsf3>
    15f2:	0e 94 97 0c 	call	0x192e	; 0x192e <__fixunssfsi>
    15f6:	05 c0       	rjmp	.+10     	; 0x1602 <main+0x580>
    15f8:	ce 01       	movw	r24, r28
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	f1 f7       	brne	.-4      	; 0x15fa <main+0x578>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15fe:	61 50       	subi	r22, 0x01	; 1
    1600:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1602:	61 15       	cp	r22, r1
    1604:	71 05       	cpc	r23, r1
    1606:	c1 f7       	brne	.-16     	; 0x15f8 <main+0x576>
    1608:	0e c1       	rjmp	.+540    	; 0x1826 <main+0x7a4>
		
		}		
		
		else if (direc == left) 	//in direction left process move 		
    160a:	83 30       	cpi	r24, 0x03	; 3
    160c:	09 f0       	breq	.+2      	; 0x1610 <main+0x58e>
    160e:	80 c0       	rjmp	.+256    	; 0x1710 <main+0x68e>
		{
		
			last_position_y = Lcd_snake_y3[snake_len-1]; 	
    1610:	80 91 cf 05 	lds	r24, 0x05CF
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	ac 01       	movw	r20, r24
    1618:	41 50       	subi	r20, 0x01	; 1
    161a:	50 40       	sbci	r21, 0x00	; 0
    161c:	fa 01       	movw	r30, r20
    161e:	ee 0f       	add	r30, r30
    1620:	ff 1f       	adc	r31, r31
    1622:	e9 55       	subi	r30, 0x59	; 89
    1624:	fa 4f       	sbci	r31, 0xFA	; 250
    1626:	20 81       	ld	r18, Z
    1628:	20 93 90 03 	sts	0x0390, r18
			last_position_x = Lcd_snake_x3[snake_len-1];
    162c:	fa 01       	movw	r30, r20
    162e:	e7 57       	subi	r30, 0x77	; 119
    1630:	fa 4f       	sbci	r31, 0xFA	; 250
    1632:	20 81       	ld	r18, Z
    1634:	20 93 8f 03 	sts	0x038F, r18

}

//function main
int main(void)
{
    1638:	02 97       	sbiw	r24, 0x02	; 2
    163a:	fc 01       	movw	r30, r24
    163c:	ee 0f       	add	r30, r30
    163e:	ff 1f       	adc	r31, r31
    1640:	e9 55       	subi	r30, 0x59	; 89
    1642:	fa 4f       	sbci	r31, 0xFA	; 250
    1644:	dc 01       	movw	r26, r24
    1646:	a7 57       	subi	r26, 0x77	; 119
    1648:	ba 4f       	sbci	r27, 0xFA	; 250
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	0c c0       	rjmp	.+24     	; 0x1668 <main+0x5e6>
			last_position_x = Lcd_snake_x3[snake_len-1];
	
			
			for (s=0;s<snake_len-1;s++) 	
			{
				Lcd_snake_y3[snake_len-1 -s] = Lcd_snake_y3[snake_len-2-s];
    1650:	80 81       	ld	r24, Z
    1652:	91 81       	ldd	r25, Z+1	; 0x01
    1654:	93 83       	std	Z+3, r25	; 0x03
    1656:	82 83       	std	Z+2, r24	; 0x02
				Lcd_snake_x3[snake_len-1 -s] = Lcd_snake_x3[snake_len-2-s];
    1658:	8c 91       	ld	r24, X
    165a:	11 96       	adiw	r26, 0x01	; 1
    165c:	8c 93       	st	X, r24
    165e:	11 97       	sbiw	r26, 0x01	; 1
    1660:	2f 5f       	subi	r18, 0xFF	; 255
    1662:	3f 4f       	sbci	r19, 0xFF	; 255
    1664:	32 97       	sbiw	r30, 0x02	; 2
    1666:	11 97       	sbiw	r26, 0x01	; 1
		
			last_position_y = Lcd_snake_y3[snake_len-1]; 	
			last_position_x = Lcd_snake_x3[snake_len-1];
	
			
			for (s=0;s<snake_len-1;s++) 	
    1668:	24 17       	cp	r18, r20
    166a:	35 07       	cpc	r19, r21
    166c:	8c f3       	brlt	.-30     	; 0x1650 <main+0x5ce>
    166e:	30 93 7c 03 	sts	0x037C, r19
    1672:	20 93 7b 03 	sts	0x037B, r18
				Lcd_snake_y3[snake_len-1 -s] = Lcd_snake_y3[snake_len-2-s];
				Lcd_snake_x3[snake_len-1 -s] = Lcd_snake_x3[snake_len-2-s];

			}			

			Lcd_snake_x3[0]--;
    1676:	80 91 89 05 	lds	r24, 0x0589
    167a:	81 50       	subi	r24, 0x01	; 1
    167c:	80 93 89 05 	sts	0x0589, r24
			if (Lcd_snake_x3[0] <= 0)
    1680:	88 23       	and	r24, r24
    1682:	11 f4       	brne	.+4      	; 0x1688 <main+0x606>
			{
				Lcd_snake_x3[0] = 27;
    1684:	80 92 89 05 	sts	0x0589, r8
			}
			
			
			LCD_write_snake();
    1688:	0e 94 71 06 	call	0xce2	; 0xce2 <LCD_write_snake>
			LCD_delete_sprite(last_position_x,last_position_y);
    168c:	80 91 8f 03 	lds	r24, 0x038F
    1690:	60 91 90 03 	lds	r22, 0x0390
    1694:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_delete_sprite>
			_delay_ms(delay_game);				
    1698:	60 91 81 03 	lds	r22, 0x0381
    169c:	70 91 82 03 	lds	r23, 0x0382
    16a0:	88 27       	eor	r24, r24
    16a2:	77 fd       	sbrc	r23, 7
    16a4:	80 95       	com	r24
    16a6:	98 2f       	mov	r25, r24
    16a8:	0e 94 c5 0c 	call	0x198a	; 0x198a <__floatsisf>
    16ac:	5b 01       	movw	r10, r22
    16ae:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	4a ef       	ldi	r20, 0xFA	; 250
    16b6:	54 e4       	ldi	r21, 0x44	; 68
    16b8:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__mulsf3>
    16bc:	7b 01       	movw	r14, r22
    16be:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	40 e8       	ldi	r20, 0x80	; 128
    16c6:	5f e3       	ldi	r21, 0x3F	; 63
    16c8:	0e 94 93 0c 	call	0x1926	; 0x1926 <__cmpsf2>
    16cc:	88 23       	and	r24, r24
    16ce:	0c f4       	brge	.+2      	; 0x16d2 <main+0x650>
    16d0:	82 c0       	rjmp	.+260    	; 0x17d6 <main+0x754>
		__ticks = 1;
	else if (__tmp > 65535)
    16d2:	c8 01       	movw	r24, r16
    16d4:	b7 01       	movw	r22, r14
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	3f ef       	ldi	r19, 0xFF	; 255
    16da:	4f e7       	ldi	r20, 0x7F	; 127
    16dc:	57 e4       	ldi	r21, 0x47	; 71
    16de:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__gesf2>
    16e2:	18 16       	cp	r1, r24
    16e4:	0c f0       	brlt	.+2      	; 0x16e8 <main+0x666>
    16e6:	98 c0       	rjmp	.+304    	; 0x1818 <main+0x796>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e8:	c6 01       	movw	r24, r12
    16ea:	b5 01       	movw	r22, r10
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	40 e2       	ldi	r20, 0x20	; 32
    16f2:	51 e4       	ldi	r21, 0x41	; 65
    16f4:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__mulsf3>
    16f8:	0e 94 97 0c 	call	0x192e	; 0x192e <__fixunssfsi>
    16fc:	05 c0       	rjmp	.+10     	; 0x1708 <main+0x686>
    16fe:	ce 01       	movw	r24, r28
    1700:	01 97       	sbiw	r24, 0x01	; 1
    1702:	f1 f7       	brne	.-4      	; 0x1700 <main+0x67e>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1704:	61 50       	subi	r22, 0x01	; 1
    1706:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1708:	61 15       	cp	r22, r1
    170a:	71 05       	cpc	r23, r1
    170c:	c1 f7       	brne	.-16     	; 0x16fe <main+0x67c>
    170e:	8b c0       	rjmp	.+278    	; 0x1826 <main+0x7a4>
		
		}		
		
		else if (direc == right) 	//in direction right process move 	
    1710:	82 30       	cpi	r24, 0x02	; 2
    1712:	09 f0       	breq	.+2      	; 0x1716 <main+0x694>
    1714:	88 c0       	rjmp	.+272    	; 0x1826 <main+0x7a4>
		{
		
			last_position_y = Lcd_snake_y3[snake_len-1]; 	
    1716:	80 91 cf 05 	lds	r24, 0x05CF
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	ac 01       	movw	r20, r24
    171e:	41 50       	subi	r20, 0x01	; 1
    1720:	50 40       	sbci	r21, 0x00	; 0
    1722:	fa 01       	movw	r30, r20
    1724:	ee 0f       	add	r30, r30
    1726:	ff 1f       	adc	r31, r31
    1728:	e9 55       	subi	r30, 0x59	; 89
    172a:	fa 4f       	sbci	r31, 0xFA	; 250
    172c:	20 81       	ld	r18, Z
    172e:	20 93 90 03 	sts	0x0390, r18
			last_position_x = Lcd_snake_x3[snake_len-1];
    1732:	fa 01       	movw	r30, r20
    1734:	e7 57       	subi	r30, 0x77	; 119
    1736:	fa 4f       	sbci	r31, 0xFA	; 250
    1738:	20 81       	ld	r18, Z
    173a:	20 93 8f 03 	sts	0x038F, r18

}

//function main
int main(void)
{
    173e:	02 97       	sbiw	r24, 0x02	; 2
    1740:	fc 01       	movw	r30, r24
    1742:	ee 0f       	add	r30, r30
    1744:	ff 1f       	adc	r31, r31
    1746:	e9 55       	subi	r30, 0x59	; 89
    1748:	fa 4f       	sbci	r31, 0xFA	; 250
    174a:	dc 01       	movw	r26, r24
    174c:	a7 57       	subi	r26, 0x77	; 119
    174e:	ba 4f       	sbci	r27, 0xFA	; 250
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	0c c0       	rjmp	.+24     	; 0x176e <main+0x6ec>
			last_position_x = Lcd_snake_x3[snake_len-1];
	
			
			for (s=0;s<snake_len-1;s++)
			{
				Lcd_snake_y3[snake_len-1 -s] = Lcd_snake_y3[snake_len-2-s];
    1756:	80 81       	ld	r24, Z
    1758:	91 81       	ldd	r25, Z+1	; 0x01
    175a:	93 83       	std	Z+3, r25	; 0x03
    175c:	82 83       	std	Z+2, r24	; 0x02
				Lcd_snake_x3[snake_len-1 -s] = Lcd_snake_x3[snake_len-2-s];
    175e:	8c 91       	ld	r24, X
    1760:	11 96       	adiw	r26, 0x01	; 1
    1762:	8c 93       	st	X, r24
    1764:	11 97       	sbiw	r26, 0x01	; 1
    1766:	2f 5f       	subi	r18, 0xFF	; 255
    1768:	3f 4f       	sbci	r19, 0xFF	; 255
    176a:	32 97       	sbiw	r30, 0x02	; 2
    176c:	11 97       	sbiw	r26, 0x01	; 1
		
			last_position_y = Lcd_snake_y3[snake_len-1]; 	
			last_position_x = Lcd_snake_x3[snake_len-1];
	
			
			for (s=0;s<snake_len-1;s++)
    176e:	24 17       	cp	r18, r20
    1770:	35 07       	cpc	r19, r21
    1772:	8c f3       	brlt	.-30     	; 0x1756 <main+0x6d4>
    1774:	30 93 7c 03 	sts	0x037C, r19
    1778:	20 93 7b 03 	sts	0x037B, r18
			{
				Lcd_snake_y3[snake_len-1 -s] = Lcd_snake_y3[snake_len-2-s];
				Lcd_snake_x3[snake_len-1 -s] = Lcd_snake_x3[snake_len-2-s];
			}			

			Lcd_snake_x3[0]++;
    177c:	80 91 89 05 	lds	r24, 0x0589
    1780:	8f 5f       	subi	r24, 0xFF	; 255
    1782:	80 93 89 05 	sts	0x0589, r24
			if (Lcd_snake_x3[0] >= 27)
    1786:	8b 31       	cpi	r24, 0x1B	; 27
    1788:	10 f0       	brcs	.+4      	; 0x178e <main+0x70c>
			{
				Lcd_snake_x3[0] = 1;
    178a:	90 92 89 05 	sts	0x0589, r9
			}
			
			
			LCD_write_snake();
    178e:	0e 94 71 06 	call	0xce2	; 0xce2 <LCD_write_snake>
			LCD_delete_sprite(last_position_x,last_position_y);
    1792:	80 91 8f 03 	lds	r24, 0x038F
    1796:	60 91 90 03 	lds	r22, 0x0390
    179a:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_delete_sprite>
			_delay_ms(delay_game);			
    179e:	60 91 81 03 	lds	r22, 0x0381
    17a2:	70 91 82 03 	lds	r23, 0x0382
    17a6:	88 27       	eor	r24, r24
    17a8:	77 fd       	sbrc	r23, 7
    17aa:	80 95       	com	r24
    17ac:	98 2f       	mov	r25, r24
    17ae:	0e 94 c5 0c 	call	0x198a	; 0x198a <__floatsisf>
    17b2:	5b 01       	movw	r10, r22
    17b4:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	4a ef       	ldi	r20, 0xFA	; 250
    17bc:	54 e4       	ldi	r21, 0x44	; 68
    17be:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__mulsf3>
    17c2:	7b 01       	movw	r14, r22
    17c4:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	40 e8       	ldi	r20, 0x80	; 128
    17cc:	5f e3       	ldi	r21, 0x3F	; 63
    17ce:	0e 94 93 0c 	call	0x1926	; 0x1926 <__cmpsf2>
    17d2:	88 23       	and	r24, r24
    17d4:	1c f4       	brge	.+6      	; 0x17dc <main+0x75a>
    17d6:	61 e0       	ldi	r22, 0x01	; 1
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	22 c0       	rjmp	.+68     	; 0x1820 <main+0x79e>
		__ticks = 1;
	else if (__tmp > 65535)
    17dc:	c8 01       	movw	r24, r16
    17de:	b7 01       	movw	r22, r14
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	3f ef       	ldi	r19, 0xFF	; 255
    17e4:	4f e7       	ldi	r20, 0x7F	; 127
    17e6:	57 e4       	ldi	r21, 0x47	; 71
    17e8:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__gesf2>
    17ec:	18 16       	cp	r1, r24
    17ee:	a4 f4       	brge	.+40     	; 0x1818 <main+0x796>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f0:	c6 01       	movw	r24, r12
    17f2:	b5 01       	movw	r22, r10
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e2       	ldi	r20, 0x20	; 32
    17fa:	51 e4       	ldi	r21, 0x41	; 65
    17fc:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__mulsf3>
    1800:	0e 94 97 0c 	call	0x192e	; 0x192e <__fixunssfsi>
    1804:	05 c0       	rjmp	.+10     	; 0x1810 <main+0x78e>
    1806:	ce 01       	movw	r24, r28
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	f1 f7       	brne	.-4      	; 0x1808 <main+0x786>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180c:	61 50       	subi	r22, 0x01	; 1
    180e:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1810:	61 15       	cp	r22, r1
    1812:	71 05       	cpc	r23, r1
    1814:	c1 f7       	brne	.-16     	; 0x1806 <main+0x784>
    1816:	07 c0       	rjmp	.+14     	; 0x1826 <main+0x7a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1818:	c8 01       	movw	r24, r16
    181a:	b7 01       	movw	r22, r14
    181c:	0e 94 97 0c 	call	0x192e	; 0x192e <__fixunssfsi>
    1820:	cb 01       	movw	r24, r22
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	f1 f7       	brne	.-4      	; 0x1822 <main+0x7a0>
		
	}	
		
		
		
		if (input_SW2_pda5) //input button wall on
    1826:	7d 9b       	sbis	0x0f, 5	; 15
    1828:	0b c0       	rjmp	.+22     	; 0x1840 <main+0x7be>
		{
			
			draw_lines_walls();
    182a:	0e 94 20 08 	call	0x1040	; 0x1040 <draw_lines_walls>
			
			lines_walls = 1;
    182e:	90 92 83 03 	sts	0x0383, r9
    1832:	88 ee       	ldi	r24, 0xE8	; 232
    1834:	93 e0       	ldi	r25, 0x03	; 3
    1836:	fe 01       	movw	r30, r28
    1838:	31 97       	sbiw	r30, 0x01	; 1
    183a:	f1 f7       	brne	.-4      	; 0x1838 <main+0x7b6>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    183c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183e:	d9 f7       	brne	.-10     	; 0x1836 <main+0x7b4>
			
			_delay_ms(100);
			
			
		}	
		if (input_SW3_pda6) //input button wall off
    1840:	7e 9b       	sbis	0x0f, 6	; 15
    1842:	0b c0       	rjmp	.+22     	; 0x185a <main+0x7d8>
		{
			
			delete_lines_walls();
    1844:	0e 94 72 04 	call	0x8e4	; 0x8e4 <delete_lines_walls>
    1848:	88 ee       	ldi	r24, 0xE8	; 232
    184a:	93 e0       	ldi	r25, 0x03	; 3
    184c:	fe 01       	movw	r30, r28
    184e:	31 97       	sbiw	r30, 0x01	; 1
    1850:	f1 f7       	brne	.-4      	; 0x184e <main+0x7cc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1852:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1854:	d9 f7       	brne	.-10     	; 0x184c <main+0x7ca>
			
			_delay_ms(100);
			
			lines_walls = 0;
    1856:	10 92 83 03 	sts	0x0383, r1
			
			
		}				
	
		if (input_SWC_pd1) //input button up
    185a:	49 9b       	sbis	0x09, 1	; 9
    185c:	17 c0       	rjmp	.+46     	; 0x188c <main+0x80a>
		{


			
			if (direc == down)
    185e:	80 91 73 03 	lds	r24, 0x0373
    1862:	81 30       	cpi	r24, 0x01	; 1
    1864:	49 f4       	brne	.+18     	; 0x1878 <main+0x7f6>
			{
				live_lose();
    1866:	0e 94 0f 07 	call	0xe1e	; 0xe1e <live_lose>
    186a:	88 e8       	ldi	r24, 0x88	; 136
    186c:	93 e1       	ldi	r25, 0x13	; 19
    186e:	fe 01       	movw	r30, r28
    1870:	31 97       	sbiw	r30, 0x01	; 1
    1872:	f1 f7       	brne	.-4      	; 0x1870 <main+0x7ee>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1874:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1876:	d9 f7       	brne	.-10     	; 0x186e <main+0x7ec>
				_delay_ms(500);
			}
			//else
			{
				direc = up;
    1878:	10 92 73 03 	sts	0x0373, r1
    187c:	88 ee       	ldi	r24, 0xE8	; 232
    187e:	93 e0       	ldi	r25, 0x03	; 3
    1880:	fe 01       	movw	r30, r28
    1882:	31 97       	sbiw	r30, 0x01	; 1
    1884:	f1 f7       	brne	.-4      	; 0x1882 <main+0x800>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1886:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1888:	d9 f7       	brne	.-10     	; 0x1880 <main+0x7fe>
    188a:	7d cc       	rjmp	.-1798   	; 0x1186 <main+0x104>
			}

			
			
		}
		else if (input_SWA_pb7)		//input button down
    188c:	1f 9b       	sbis	0x03, 7	; 3
    188e:	17 c0       	rjmp	.+46     	; 0x18be <main+0x83c>
		{
			

			
			if (direc == up)
    1890:	80 91 73 03 	lds	r24, 0x0373
    1894:	88 23       	and	r24, r24
    1896:	49 f4       	brne	.+18     	; 0x18aa <main+0x828>
			{
				live_lose();
    1898:	0e 94 0f 07 	call	0xe1e	; 0xe1e <live_lose>
    189c:	88 e8       	ldi	r24, 0x88	; 136
    189e:	93 e1       	ldi	r25, 0x13	; 19
    18a0:	fe 01       	movw	r30, r28
    18a2:	31 97       	sbiw	r30, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <main+0x820>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a8:	d9 f7       	brne	.-10     	; 0x18a0 <main+0x81e>
				_delay_ms(500);
			}
			//else
			{
				direc = down;
    18aa:	90 92 73 03 	sts	0x0373, r9
    18ae:	88 ee       	ldi	r24, 0xE8	; 232
    18b0:	93 e0       	ldi	r25, 0x03	; 3
    18b2:	fe 01       	movw	r30, r28
    18b4:	31 97       	sbiw	r30, 0x01	; 1
    18b6:	f1 f7       	brne	.-4      	; 0x18b4 <main+0x832>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ba:	d9 f7       	brne	.-10     	; 0x18b2 <main+0x830>
    18bc:	64 cc       	rjmp	.-1848   	; 0x1186 <main+0x104>
			}	
			

		}		
		
		else if (input_SWD_pd0) //input button right
    18be:	48 9b       	sbis	0x09, 0	; 9
    18c0:	18 c0       	rjmp	.+48     	; 0x18f2 <main+0x870>
		{
			

			
			if (direc == left)
    18c2:	80 91 73 03 	lds	r24, 0x0373
    18c6:	83 30       	cpi	r24, 0x03	; 3
    18c8:	49 f4       	brne	.+18     	; 0x18dc <main+0x85a>
			{
				live_lose();
    18ca:	0e 94 0f 07 	call	0xe1e	; 0xe1e <live_lose>
    18ce:	88 e8       	ldi	r24, 0x88	; 136
    18d0:	93 e1       	ldi	r25, 0x13	; 19
    18d2:	fe 01       	movw	r30, r28
    18d4:	31 97       	sbiw	r30, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <main+0x852>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18da:	d9 f7       	brne	.-10     	; 0x18d2 <main+0x850>
				_delay_ms(500);
			}			
			//else
			{
				direc = right;
    18dc:	92 e0       	ldi	r25, 0x02	; 2
    18de:	90 93 73 03 	sts	0x0373, r25
    18e2:	88 ee       	ldi	r24, 0xE8	; 232
    18e4:	93 e0       	ldi	r25, 0x03	; 3
    18e6:	fe 01       	movw	r30, r28
    18e8:	31 97       	sbiw	r30, 0x01	; 1
    18ea:	f1 f7       	brne	.-4      	; 0x18e8 <main+0x866>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ee:	d9 f7       	brne	.-10     	; 0x18e6 <main+0x864>
    18f0:	4a cc       	rjmp	.-1900   	; 0x1186 <main+0x104>
			
			}
			

		}
		else if (input_SWB_pb1)		//input buttonleft
    18f2:	19 9b       	sbis	0x03, 1	; 3
    18f4:	48 cc       	rjmp	.-1904   	; 0x1186 <main+0x104>
		{

			
			if (direc == right)
    18f6:	80 91 73 03 	lds	r24, 0x0373
    18fa:	82 30       	cpi	r24, 0x02	; 2
    18fc:	49 f4       	brne	.+18     	; 0x1910 <main+0x88e>
			{
				live_lose();
    18fe:	0e 94 0f 07 	call	0xe1e	; 0xe1e <live_lose>
    1902:	88 e8       	ldi	r24, 0x88	; 136
    1904:	93 e1       	ldi	r25, 0x13	; 19
    1906:	fe 01       	movw	r30, r28
    1908:	31 97       	sbiw	r30, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <main+0x886>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    190c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    190e:	d9 f7       	brne	.-10     	; 0x1906 <main+0x884>
				_delay_ms(500);
			}
			//else 
			{
				direc = left;
    1910:	23 e0       	ldi	r18, 0x03	; 3
    1912:	20 93 73 03 	sts	0x0373, r18
    1916:	88 ee       	ldi	r24, 0xE8	; 232
    1918:	93 e0       	ldi	r25, 0x03	; 3
    191a:	fe 01       	movw	r30, r28
    191c:	31 97       	sbiw	r30, 0x01	; 1
    191e:	f1 f7       	brne	.-4      	; 0x191c <main+0x89a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1920:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1922:	d9 f7       	brne	.-10     	; 0x191a <main+0x898>
    1924:	30 cc       	rjmp	.-1952   	; 0x1186 <main+0x104>

00001926 <__cmpsf2>:
    1926:	6c d0       	rcall	.+216    	; 0x1a00 <__fp_cmp>
    1928:	08 f4       	brcc	.+2      	; 0x192c <__cmpsf2+0x6>
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	08 95       	ret

0000192e <__fixunssfsi>:
    192e:	94 d0       	rcall	.+296    	; 0x1a58 <__fp_splitA>
    1930:	88 f0       	brcs	.+34     	; 0x1954 <__fixunssfsi+0x26>
    1932:	9f 57       	subi	r25, 0x7F	; 127
    1934:	90 f0       	brcs	.+36     	; 0x195a <__fixunssfsi+0x2c>
    1936:	b9 2f       	mov	r27, r25
    1938:	99 27       	eor	r25, r25
    193a:	b7 51       	subi	r27, 0x17	; 23
    193c:	a0 f0       	brcs	.+40     	; 0x1966 <__fixunssfsi+0x38>
    193e:	d1 f0       	breq	.+52     	; 0x1974 <__fixunssfsi+0x46>
    1940:	66 0f       	add	r22, r22
    1942:	77 1f       	adc	r23, r23
    1944:	88 1f       	adc	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	1a f0       	brmi	.+6      	; 0x1950 <__fixunssfsi+0x22>
    194a:	ba 95       	dec	r27
    194c:	c9 f7       	brne	.-14     	; 0x1940 <__fixunssfsi+0x12>
    194e:	12 c0       	rjmp	.+36     	; 0x1974 <__fixunssfsi+0x46>
    1950:	b1 30       	cpi	r27, 0x01	; 1
    1952:	81 f0       	breq	.+32     	; 0x1974 <__fixunssfsi+0x46>
    1954:	9b d0       	rcall	.+310    	; 0x1a8c <__fp_zero>
    1956:	b1 e0       	ldi	r27, 0x01	; 1
    1958:	08 95       	ret
    195a:	98 c0       	rjmp	.+304    	; 0x1a8c <__fp_zero>
    195c:	67 2f       	mov	r22, r23
    195e:	78 2f       	mov	r23, r24
    1960:	88 27       	eor	r24, r24
    1962:	b8 5f       	subi	r27, 0xF8	; 248
    1964:	39 f0       	breq	.+14     	; 0x1974 <__fixunssfsi+0x46>
    1966:	b9 3f       	cpi	r27, 0xF9	; 249
    1968:	cc f3       	brlt	.-14     	; 0x195c <__fixunssfsi+0x2e>
    196a:	86 95       	lsr	r24
    196c:	77 95       	ror	r23
    196e:	67 95       	ror	r22
    1970:	b3 95       	inc	r27
    1972:	d9 f7       	brne	.-10     	; 0x196a <__fixunssfsi+0x3c>
    1974:	3e f4       	brtc	.+14     	; 0x1984 <__fixunssfsi+0x56>
    1976:	90 95       	com	r25
    1978:	80 95       	com	r24
    197a:	70 95       	com	r23
    197c:	61 95       	neg	r22
    197e:	7f 4f       	sbci	r23, 0xFF	; 255
    1980:	8f 4f       	sbci	r24, 0xFF	; 255
    1982:	9f 4f       	sbci	r25, 0xFF	; 255
    1984:	08 95       	ret

00001986 <__floatunsisf>:
    1986:	e8 94       	clt
    1988:	09 c0       	rjmp	.+18     	; 0x199c <__floatsisf+0x12>

0000198a <__floatsisf>:
    198a:	97 fb       	bst	r25, 7
    198c:	3e f4       	brtc	.+14     	; 0x199c <__floatsisf+0x12>
    198e:	90 95       	com	r25
    1990:	80 95       	com	r24
    1992:	70 95       	com	r23
    1994:	61 95       	neg	r22
    1996:	7f 4f       	sbci	r23, 0xFF	; 255
    1998:	8f 4f       	sbci	r24, 0xFF	; 255
    199a:	9f 4f       	sbci	r25, 0xFF	; 255
    199c:	99 23       	and	r25, r25
    199e:	a9 f0       	breq	.+42     	; 0x19ca <__floatsisf+0x40>
    19a0:	f9 2f       	mov	r31, r25
    19a2:	96 e9       	ldi	r25, 0x96	; 150
    19a4:	bb 27       	eor	r27, r27
    19a6:	93 95       	inc	r25
    19a8:	f6 95       	lsr	r31
    19aa:	87 95       	ror	r24
    19ac:	77 95       	ror	r23
    19ae:	67 95       	ror	r22
    19b0:	b7 95       	ror	r27
    19b2:	f1 11       	cpse	r31, r1
    19b4:	f8 cf       	rjmp	.-16     	; 0x19a6 <__floatsisf+0x1c>
    19b6:	fa f4       	brpl	.+62     	; 0x19f6 <__floatsisf+0x6c>
    19b8:	bb 0f       	add	r27, r27
    19ba:	11 f4       	brne	.+4      	; 0x19c0 <__floatsisf+0x36>
    19bc:	60 ff       	sbrs	r22, 0
    19be:	1b c0       	rjmp	.+54     	; 0x19f6 <__floatsisf+0x6c>
    19c0:	6f 5f       	subi	r22, 0xFF	; 255
    19c2:	7f 4f       	sbci	r23, 0xFF	; 255
    19c4:	8f 4f       	sbci	r24, 0xFF	; 255
    19c6:	9f 4f       	sbci	r25, 0xFF	; 255
    19c8:	16 c0       	rjmp	.+44     	; 0x19f6 <__floatsisf+0x6c>
    19ca:	88 23       	and	r24, r24
    19cc:	11 f0       	breq	.+4      	; 0x19d2 <__floatsisf+0x48>
    19ce:	96 e9       	ldi	r25, 0x96	; 150
    19d0:	11 c0       	rjmp	.+34     	; 0x19f4 <__floatsisf+0x6a>
    19d2:	77 23       	and	r23, r23
    19d4:	21 f0       	breq	.+8      	; 0x19de <__floatsisf+0x54>
    19d6:	9e e8       	ldi	r25, 0x8E	; 142
    19d8:	87 2f       	mov	r24, r23
    19da:	76 2f       	mov	r23, r22
    19dc:	05 c0       	rjmp	.+10     	; 0x19e8 <__floatsisf+0x5e>
    19de:	66 23       	and	r22, r22
    19e0:	71 f0       	breq	.+28     	; 0x19fe <__floatsisf+0x74>
    19e2:	96 e8       	ldi	r25, 0x86	; 134
    19e4:	86 2f       	mov	r24, r22
    19e6:	70 e0       	ldi	r23, 0x00	; 0
    19e8:	60 e0       	ldi	r22, 0x00	; 0
    19ea:	2a f0       	brmi	.+10     	; 0x19f6 <__floatsisf+0x6c>
    19ec:	9a 95       	dec	r25
    19ee:	66 0f       	add	r22, r22
    19f0:	77 1f       	adc	r23, r23
    19f2:	88 1f       	adc	r24, r24
    19f4:	da f7       	brpl	.-10     	; 0x19ec <__floatsisf+0x62>
    19f6:	88 0f       	add	r24, r24
    19f8:	96 95       	lsr	r25
    19fa:	87 95       	ror	r24
    19fc:	97 f9       	bld	r25, 7
    19fe:	08 95       	ret

00001a00 <__fp_cmp>:
    1a00:	99 0f       	add	r25, r25
    1a02:	00 08       	sbc	r0, r0
    1a04:	55 0f       	add	r21, r21
    1a06:	aa 0b       	sbc	r26, r26
    1a08:	e0 e8       	ldi	r30, 0x80	; 128
    1a0a:	fe ef       	ldi	r31, 0xFE	; 254
    1a0c:	16 16       	cp	r1, r22
    1a0e:	17 06       	cpc	r1, r23
    1a10:	e8 07       	cpc	r30, r24
    1a12:	f9 07       	cpc	r31, r25
    1a14:	c0 f0       	brcs	.+48     	; 0x1a46 <__fp_cmp+0x46>
    1a16:	12 16       	cp	r1, r18
    1a18:	13 06       	cpc	r1, r19
    1a1a:	e4 07       	cpc	r30, r20
    1a1c:	f5 07       	cpc	r31, r21
    1a1e:	98 f0       	brcs	.+38     	; 0x1a46 <__fp_cmp+0x46>
    1a20:	62 1b       	sub	r22, r18
    1a22:	73 0b       	sbc	r23, r19
    1a24:	84 0b       	sbc	r24, r20
    1a26:	95 0b       	sbc	r25, r21
    1a28:	39 f4       	brne	.+14     	; 0x1a38 <__fp_cmp+0x38>
    1a2a:	0a 26       	eor	r0, r26
    1a2c:	61 f0       	breq	.+24     	; 0x1a46 <__fp_cmp+0x46>
    1a2e:	23 2b       	or	r18, r19
    1a30:	24 2b       	or	r18, r20
    1a32:	25 2b       	or	r18, r21
    1a34:	21 f4       	brne	.+8      	; 0x1a3e <__fp_cmp+0x3e>
    1a36:	08 95       	ret
    1a38:	0a 26       	eor	r0, r26
    1a3a:	09 f4       	brne	.+2      	; 0x1a3e <__fp_cmp+0x3e>
    1a3c:	a1 40       	sbci	r26, 0x01	; 1
    1a3e:	a6 95       	lsr	r26
    1a40:	8f ef       	ldi	r24, 0xFF	; 255
    1a42:	81 1d       	adc	r24, r1
    1a44:	81 1d       	adc	r24, r1
    1a46:	08 95       	ret

00001a48 <__fp_split3>:
    1a48:	57 fd       	sbrc	r21, 7
    1a4a:	90 58       	subi	r25, 0x80	; 128
    1a4c:	44 0f       	add	r20, r20
    1a4e:	55 1f       	adc	r21, r21
    1a50:	59 f0       	breq	.+22     	; 0x1a68 <__fp_splitA+0x10>
    1a52:	5f 3f       	cpi	r21, 0xFF	; 255
    1a54:	71 f0       	breq	.+28     	; 0x1a72 <__fp_splitA+0x1a>
    1a56:	47 95       	ror	r20

00001a58 <__fp_splitA>:
    1a58:	88 0f       	add	r24, r24
    1a5a:	97 fb       	bst	r25, 7
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	61 f0       	breq	.+24     	; 0x1a78 <__fp_splitA+0x20>
    1a60:	9f 3f       	cpi	r25, 0xFF	; 255
    1a62:	79 f0       	breq	.+30     	; 0x1a82 <__fp_splitA+0x2a>
    1a64:	87 95       	ror	r24
    1a66:	08 95       	ret
    1a68:	12 16       	cp	r1, r18
    1a6a:	13 06       	cpc	r1, r19
    1a6c:	14 06       	cpc	r1, r20
    1a6e:	55 1f       	adc	r21, r21
    1a70:	f2 cf       	rjmp	.-28     	; 0x1a56 <__fp_split3+0xe>
    1a72:	46 95       	lsr	r20
    1a74:	f1 df       	rcall	.-30     	; 0x1a58 <__fp_splitA>
    1a76:	08 c0       	rjmp	.+16     	; 0x1a88 <__fp_splitA+0x30>
    1a78:	16 16       	cp	r1, r22
    1a7a:	17 06       	cpc	r1, r23
    1a7c:	18 06       	cpc	r1, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	f1 cf       	rjmp	.-30     	; 0x1a64 <__fp_splitA+0xc>
    1a82:	86 95       	lsr	r24
    1a84:	71 05       	cpc	r23, r1
    1a86:	61 05       	cpc	r22, r1
    1a88:	08 94       	sec
    1a8a:	08 95       	ret

00001a8c <__fp_zero>:
    1a8c:	e8 94       	clt

00001a8e <__fp_szero>:
    1a8e:	bb 27       	eor	r27, r27
    1a90:	66 27       	eor	r22, r22
    1a92:	77 27       	eor	r23, r23
    1a94:	cb 01       	movw	r24, r22
    1a96:	97 f9       	bld	r25, 7
    1a98:	08 95       	ret

00001a9a <__gesf2>:
    1a9a:	b2 df       	rcall	.-156    	; 0x1a00 <__fp_cmp>
    1a9c:	08 f4       	brcc	.+2      	; 0x1aa0 <__gesf2+0x6>
    1a9e:	8f ef       	ldi	r24, 0xFF	; 255
    1aa0:	08 95       	ret

00001aa2 <__mulsf3>:
    1aa2:	0b d0       	rcall	.+22     	; 0x1aba <__mulsf3x>
    1aa4:	a8 c0       	rjmp	.+336    	; 0x1bf6 <__fp_round>
    1aa6:	99 d0       	rcall	.+306    	; 0x1bda <__fp_pscA>
    1aa8:	28 f0       	brcs	.+10     	; 0x1ab4 <__mulsf3+0x12>
    1aaa:	9e d0       	rcall	.+316    	; 0x1be8 <__fp_pscB>
    1aac:	18 f0       	brcs	.+6      	; 0x1ab4 <__mulsf3+0x12>
    1aae:	95 23       	and	r25, r21
    1ab0:	09 f0       	breq	.+2      	; 0x1ab4 <__mulsf3+0x12>
    1ab2:	61 c0       	rjmp	.+194    	; 0x1b76 <__fp_inf>
    1ab4:	8f c0       	rjmp	.+286    	; 0x1bd4 <__fp_nan>
    1ab6:	11 24       	eor	r1, r1
    1ab8:	ea cf       	rjmp	.-44     	; 0x1a8e <__fp_szero>

00001aba <__mulsf3x>:
    1aba:	c6 df       	rcall	.-116    	; 0x1a48 <__fp_split3>
    1abc:	a0 f3       	brcs	.-24     	; 0x1aa6 <__mulsf3+0x4>

00001abe <__mulsf3_pse>:
    1abe:	95 9f       	mul	r25, r21
    1ac0:	d1 f3       	breq	.-12     	; 0x1ab6 <__mulsf3+0x14>
    1ac2:	95 0f       	add	r25, r21
    1ac4:	50 e0       	ldi	r21, 0x00	; 0
    1ac6:	55 1f       	adc	r21, r21
    1ac8:	62 9f       	mul	r22, r18
    1aca:	f0 01       	movw	r30, r0
    1acc:	72 9f       	mul	r23, r18
    1ace:	bb 27       	eor	r27, r27
    1ad0:	f0 0d       	add	r31, r0
    1ad2:	b1 1d       	adc	r27, r1
    1ad4:	63 9f       	mul	r22, r19
    1ad6:	aa 27       	eor	r26, r26
    1ad8:	f0 0d       	add	r31, r0
    1ada:	b1 1d       	adc	r27, r1
    1adc:	aa 1f       	adc	r26, r26
    1ade:	64 9f       	mul	r22, r20
    1ae0:	66 27       	eor	r22, r22
    1ae2:	b0 0d       	add	r27, r0
    1ae4:	a1 1d       	adc	r26, r1
    1ae6:	66 1f       	adc	r22, r22
    1ae8:	82 9f       	mul	r24, r18
    1aea:	22 27       	eor	r18, r18
    1aec:	b0 0d       	add	r27, r0
    1aee:	a1 1d       	adc	r26, r1
    1af0:	62 1f       	adc	r22, r18
    1af2:	73 9f       	mul	r23, r19
    1af4:	b0 0d       	add	r27, r0
    1af6:	a1 1d       	adc	r26, r1
    1af8:	62 1f       	adc	r22, r18
    1afa:	83 9f       	mul	r24, r19
    1afc:	a0 0d       	add	r26, r0
    1afe:	61 1d       	adc	r22, r1
    1b00:	22 1f       	adc	r18, r18
    1b02:	74 9f       	mul	r23, r20
    1b04:	33 27       	eor	r19, r19
    1b06:	a0 0d       	add	r26, r0
    1b08:	61 1d       	adc	r22, r1
    1b0a:	23 1f       	adc	r18, r19
    1b0c:	84 9f       	mul	r24, r20
    1b0e:	60 0d       	add	r22, r0
    1b10:	21 1d       	adc	r18, r1
    1b12:	82 2f       	mov	r24, r18
    1b14:	76 2f       	mov	r23, r22
    1b16:	6a 2f       	mov	r22, r26
    1b18:	11 24       	eor	r1, r1
    1b1a:	9f 57       	subi	r25, 0x7F	; 127
    1b1c:	50 40       	sbci	r21, 0x00	; 0
    1b1e:	8a f0       	brmi	.+34     	; 0x1b42 <__mulsf3_pse+0x84>
    1b20:	e1 f0       	breq	.+56     	; 0x1b5a <__mulsf3_pse+0x9c>
    1b22:	88 23       	and	r24, r24
    1b24:	4a f0       	brmi	.+18     	; 0x1b38 <__mulsf3_pse+0x7a>
    1b26:	ee 0f       	add	r30, r30
    1b28:	ff 1f       	adc	r31, r31
    1b2a:	bb 1f       	adc	r27, r27
    1b2c:	66 1f       	adc	r22, r22
    1b2e:	77 1f       	adc	r23, r23
    1b30:	88 1f       	adc	r24, r24
    1b32:	91 50       	subi	r25, 0x01	; 1
    1b34:	50 40       	sbci	r21, 0x00	; 0
    1b36:	a9 f7       	brne	.-22     	; 0x1b22 <__mulsf3_pse+0x64>
    1b38:	9e 3f       	cpi	r25, 0xFE	; 254
    1b3a:	51 05       	cpc	r21, r1
    1b3c:	70 f0       	brcs	.+28     	; 0x1b5a <__mulsf3_pse+0x9c>
    1b3e:	1b c0       	rjmp	.+54     	; 0x1b76 <__fp_inf>
    1b40:	a6 cf       	rjmp	.-180    	; 0x1a8e <__fp_szero>
    1b42:	5f 3f       	cpi	r21, 0xFF	; 255
    1b44:	ec f3       	brlt	.-6      	; 0x1b40 <__mulsf3_pse+0x82>
    1b46:	98 3e       	cpi	r25, 0xE8	; 232
    1b48:	dc f3       	brlt	.-10     	; 0x1b40 <__mulsf3_pse+0x82>
    1b4a:	86 95       	lsr	r24
    1b4c:	77 95       	ror	r23
    1b4e:	67 95       	ror	r22
    1b50:	b7 95       	ror	r27
    1b52:	f7 95       	ror	r31
    1b54:	e7 95       	ror	r30
    1b56:	9f 5f       	subi	r25, 0xFF	; 255
    1b58:	c1 f7       	brne	.-16     	; 0x1b4a <__mulsf3_pse+0x8c>
    1b5a:	fe 2b       	or	r31, r30
    1b5c:	88 0f       	add	r24, r24
    1b5e:	91 1d       	adc	r25, r1
    1b60:	96 95       	lsr	r25
    1b62:	87 95       	ror	r24
    1b64:	97 f9       	bld	r25, 7
    1b66:	08 95       	ret

00001b68 <trunc>:
    1b68:	57 d0       	rcall	.+174    	; 0x1c18 <__fp_trunc>
    1b6a:	20 f0       	brcs	.+8      	; 0x1b74 <trunc+0xc>
    1b6c:	9f 37       	cpi	r25, 0x7F	; 127
    1b6e:	08 f4       	brcc	.+2      	; 0x1b72 <trunc+0xa>
    1b70:	8e cf       	rjmp	.-228    	; 0x1a8e <__fp_szero>
    1b72:	07 c0       	rjmp	.+14     	; 0x1b82 <__fp_mintl>
    1b74:	21 c0       	rjmp	.+66     	; 0x1bb8 <__fp_mpack>

00001b76 <__fp_inf>:
    1b76:	97 f9       	bld	r25, 7
    1b78:	9f 67       	ori	r25, 0x7F	; 127
    1b7a:	80 e8       	ldi	r24, 0x80	; 128
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	60 e0       	ldi	r22, 0x00	; 0
    1b80:	08 95       	ret

00001b82 <__fp_mintl>:
    1b82:	88 23       	and	r24, r24
    1b84:	71 f4       	brne	.+28     	; 0x1ba2 <__fp_mintl+0x20>
    1b86:	77 23       	and	r23, r23
    1b88:	21 f0       	breq	.+8      	; 0x1b92 <__fp_mintl+0x10>
    1b8a:	98 50       	subi	r25, 0x08	; 8
    1b8c:	87 2b       	or	r24, r23
    1b8e:	76 2f       	mov	r23, r22
    1b90:	07 c0       	rjmp	.+14     	; 0x1ba0 <__fp_mintl+0x1e>
    1b92:	66 23       	and	r22, r22
    1b94:	11 f4       	brne	.+4      	; 0x1b9a <__fp_mintl+0x18>
    1b96:	99 27       	eor	r25, r25
    1b98:	0d c0       	rjmp	.+26     	; 0x1bb4 <__fp_mintl+0x32>
    1b9a:	90 51       	subi	r25, 0x10	; 16
    1b9c:	86 2b       	or	r24, r22
    1b9e:	70 e0       	ldi	r23, 0x00	; 0
    1ba0:	60 e0       	ldi	r22, 0x00	; 0
    1ba2:	2a f0       	brmi	.+10     	; 0x1bae <__fp_mintl+0x2c>
    1ba4:	9a 95       	dec	r25
    1ba6:	66 0f       	add	r22, r22
    1ba8:	77 1f       	adc	r23, r23
    1baa:	88 1f       	adc	r24, r24
    1bac:	da f7       	brpl	.-10     	; 0x1ba4 <__fp_mintl+0x22>
    1bae:	88 0f       	add	r24, r24
    1bb0:	96 95       	lsr	r25
    1bb2:	87 95       	ror	r24
    1bb4:	97 f9       	bld	r25, 7
    1bb6:	08 95       	ret

00001bb8 <__fp_mpack>:
    1bb8:	9f 3f       	cpi	r25, 0xFF	; 255
    1bba:	31 f0       	breq	.+12     	; 0x1bc8 <__fp_mpack_finite+0xc>

00001bbc <__fp_mpack_finite>:
    1bbc:	91 50       	subi	r25, 0x01	; 1
    1bbe:	20 f4       	brcc	.+8      	; 0x1bc8 <__fp_mpack_finite+0xc>
    1bc0:	87 95       	ror	r24
    1bc2:	77 95       	ror	r23
    1bc4:	67 95       	ror	r22
    1bc6:	b7 95       	ror	r27
    1bc8:	88 0f       	add	r24, r24
    1bca:	91 1d       	adc	r25, r1
    1bcc:	96 95       	lsr	r25
    1bce:	87 95       	ror	r24
    1bd0:	97 f9       	bld	r25, 7
    1bd2:	08 95       	ret

00001bd4 <__fp_nan>:
    1bd4:	9f ef       	ldi	r25, 0xFF	; 255
    1bd6:	80 ec       	ldi	r24, 0xC0	; 192
    1bd8:	08 95       	ret

00001bda <__fp_pscA>:
    1bda:	00 24       	eor	r0, r0
    1bdc:	0a 94       	dec	r0
    1bde:	16 16       	cp	r1, r22
    1be0:	17 06       	cpc	r1, r23
    1be2:	18 06       	cpc	r1, r24
    1be4:	09 06       	cpc	r0, r25
    1be6:	08 95       	ret

00001be8 <__fp_pscB>:
    1be8:	00 24       	eor	r0, r0
    1bea:	0a 94       	dec	r0
    1bec:	12 16       	cp	r1, r18
    1bee:	13 06       	cpc	r1, r19
    1bf0:	14 06       	cpc	r1, r20
    1bf2:	05 06       	cpc	r0, r21
    1bf4:	08 95       	ret

00001bf6 <__fp_round>:
    1bf6:	09 2e       	mov	r0, r25
    1bf8:	03 94       	inc	r0
    1bfa:	00 0c       	add	r0, r0
    1bfc:	11 f4       	brne	.+4      	; 0x1c02 <__fp_round+0xc>
    1bfe:	88 23       	and	r24, r24
    1c00:	52 f0       	brmi	.+20     	; 0x1c16 <__fp_round+0x20>
    1c02:	bb 0f       	add	r27, r27
    1c04:	40 f4       	brcc	.+16     	; 0x1c16 <__fp_round+0x20>
    1c06:	bf 2b       	or	r27, r31
    1c08:	11 f4       	brne	.+4      	; 0x1c0e <__fp_round+0x18>
    1c0a:	60 ff       	sbrs	r22, 0
    1c0c:	04 c0       	rjmp	.+8      	; 0x1c16 <__fp_round+0x20>
    1c0e:	6f 5f       	subi	r22, 0xFF	; 255
    1c10:	7f 4f       	sbci	r23, 0xFF	; 255
    1c12:	8f 4f       	sbci	r24, 0xFF	; 255
    1c14:	9f 4f       	sbci	r25, 0xFF	; 255
    1c16:	08 95       	ret

00001c18 <__fp_trunc>:
    1c18:	1f df       	rcall	.-450    	; 0x1a58 <__fp_splitA>
    1c1a:	a0 f0       	brcs	.+40     	; 0x1c44 <__fp_trunc+0x2c>
    1c1c:	be e7       	ldi	r27, 0x7E	; 126
    1c1e:	b9 17       	cp	r27, r25
    1c20:	88 f4       	brcc	.+34     	; 0x1c44 <__fp_trunc+0x2c>
    1c22:	bb 27       	eor	r27, r27
    1c24:	9f 38       	cpi	r25, 0x8F	; 143
    1c26:	60 f4       	brcc	.+24     	; 0x1c40 <__fp_trunc+0x28>
    1c28:	16 16       	cp	r1, r22
    1c2a:	b1 1d       	adc	r27, r1
    1c2c:	67 2f       	mov	r22, r23
    1c2e:	78 2f       	mov	r23, r24
    1c30:	88 27       	eor	r24, r24
    1c32:	98 5f       	subi	r25, 0xF8	; 248
    1c34:	f7 cf       	rjmp	.-18     	; 0x1c24 <__fp_trunc+0xc>
    1c36:	86 95       	lsr	r24
    1c38:	77 95       	ror	r23
    1c3a:	67 95       	ror	r22
    1c3c:	b1 1d       	adc	r27, r1
    1c3e:	93 95       	inc	r25
    1c40:	96 39       	cpi	r25, 0x96	; 150
    1c42:	c8 f3       	brcs	.-14     	; 0x1c36 <__fp_trunc+0x1e>
    1c44:	08 95       	ret

00001c46 <__divmodhi4>:
    1c46:	97 fb       	bst	r25, 7
    1c48:	09 2e       	mov	r0, r25
    1c4a:	07 26       	eor	r0, r23
    1c4c:	0a d0       	rcall	.+20     	; 0x1c62 <__divmodhi4_neg1>
    1c4e:	77 fd       	sbrc	r23, 7
    1c50:	04 d0       	rcall	.+8      	; 0x1c5a <__divmodhi4_neg2>
    1c52:	0c d0       	rcall	.+24     	; 0x1c6c <__udivmodhi4>
    1c54:	06 d0       	rcall	.+12     	; 0x1c62 <__divmodhi4_neg1>
    1c56:	00 20       	and	r0, r0
    1c58:	1a f4       	brpl	.+6      	; 0x1c60 <__divmodhi4_exit>

00001c5a <__divmodhi4_neg2>:
    1c5a:	70 95       	com	r23
    1c5c:	61 95       	neg	r22
    1c5e:	7f 4f       	sbci	r23, 0xFF	; 255

00001c60 <__divmodhi4_exit>:
    1c60:	08 95       	ret

00001c62 <__divmodhi4_neg1>:
    1c62:	f6 f7       	brtc	.-4      	; 0x1c60 <__divmodhi4_exit>
    1c64:	90 95       	com	r25
    1c66:	81 95       	neg	r24
    1c68:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6a:	08 95       	ret

00001c6c <__udivmodhi4>:
    1c6c:	aa 1b       	sub	r26, r26
    1c6e:	bb 1b       	sub	r27, r27
    1c70:	51 e1       	ldi	r21, 0x11	; 17
    1c72:	07 c0       	rjmp	.+14     	; 0x1c82 <__udivmodhi4_ep>

00001c74 <__udivmodhi4_loop>:
    1c74:	aa 1f       	adc	r26, r26
    1c76:	bb 1f       	adc	r27, r27
    1c78:	a6 17       	cp	r26, r22
    1c7a:	b7 07       	cpc	r27, r23
    1c7c:	10 f0       	brcs	.+4      	; 0x1c82 <__udivmodhi4_ep>
    1c7e:	a6 1b       	sub	r26, r22
    1c80:	b7 0b       	sbc	r27, r23

00001c82 <__udivmodhi4_ep>:
    1c82:	88 1f       	adc	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	5a 95       	dec	r21
    1c88:	a9 f7       	brne	.-22     	; 0x1c74 <__udivmodhi4_loop>
    1c8a:	80 95       	com	r24
    1c8c:	90 95       	com	r25
    1c8e:	bc 01       	movw	r22, r24
    1c90:	cd 01       	movw	r24, r26
    1c92:	08 95       	ret

00001c94 <do_rand>:
    1c94:	a0 e0       	ldi	r26, 0x00	; 0
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e0 e5       	ldi	r30, 0x50	; 80
    1c9a:	fe e0       	ldi	r31, 0x0E	; 14
    1c9c:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <__prologue_saves__+0x10>
    1ca0:	ec 01       	movw	r28, r24
    1ca2:	a8 80       	ld	r10, Y
    1ca4:	b9 80       	ldd	r11, Y+1	; 0x01
    1ca6:	ca 80       	ldd	r12, Y+2	; 0x02
    1ca8:	db 80       	ldd	r13, Y+3	; 0x03
    1caa:	a1 14       	cp	r10, r1
    1cac:	b1 04       	cpc	r11, r1
    1cae:	c1 04       	cpc	r12, r1
    1cb0:	d1 04       	cpc	r13, r1
    1cb2:	41 f4       	brne	.+16     	; 0x1cc4 <do_rand+0x30>
    1cb4:	84 e2       	ldi	r24, 0x24	; 36
    1cb6:	a8 2e       	mov	r10, r24
    1cb8:	89 ed       	ldi	r24, 0xD9	; 217
    1cba:	b8 2e       	mov	r11, r24
    1cbc:	8b e5       	ldi	r24, 0x5B	; 91
    1cbe:	c8 2e       	mov	r12, r24
    1cc0:	87 e0       	ldi	r24, 0x07	; 7
    1cc2:	d8 2e       	mov	r13, r24
    1cc4:	c6 01       	movw	r24, r12
    1cc6:	b5 01       	movw	r22, r10
    1cc8:	2d e1       	ldi	r18, 0x1D	; 29
    1cca:	33 ef       	ldi	r19, 0xF3	; 243
    1ccc:	41 e0       	ldi	r20, 0x01	; 1
    1cce:	50 e0       	ldi	r21, 0x00	; 0
    1cd0:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__divmodsi4>
    1cd4:	27 ea       	ldi	r18, 0xA7	; 167
    1cd6:	31 e4       	ldi	r19, 0x41	; 65
    1cd8:	40 e0       	ldi	r20, 0x00	; 0
    1cda:	50 e0       	ldi	r21, 0x00	; 0
    1cdc:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <__mulsi3>
    1ce0:	7b 01       	movw	r14, r22
    1ce2:	8c 01       	movw	r16, r24
    1ce4:	c6 01       	movw	r24, r12
    1ce6:	b5 01       	movw	r22, r10
    1ce8:	2d e1       	ldi	r18, 0x1D	; 29
    1cea:	33 ef       	ldi	r19, 0xF3	; 243
    1cec:	41 e0       	ldi	r20, 0x01	; 1
    1cee:	50 e0       	ldi	r21, 0x00	; 0
    1cf0:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__divmodsi4>
    1cf4:	ca 01       	movw	r24, r20
    1cf6:	b9 01       	movw	r22, r18
    1cf8:	2c ee       	ldi	r18, 0xEC	; 236
    1cfa:	34 ef       	ldi	r19, 0xF4	; 244
    1cfc:	4f ef       	ldi	r20, 0xFF	; 255
    1cfe:	5f ef       	ldi	r21, 0xFF	; 255
    1d00:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <__mulsi3>
    1d04:	6e 0d       	add	r22, r14
    1d06:	7f 1d       	adc	r23, r15
    1d08:	80 1f       	adc	r24, r16
    1d0a:	91 1f       	adc	r25, r17
    1d0c:	97 ff       	sbrs	r25, 7
    1d0e:	04 c0       	rjmp	.+8      	; 0x1d18 <do_rand+0x84>
    1d10:	61 50       	subi	r22, 0x01	; 1
    1d12:	70 40       	sbci	r23, 0x00	; 0
    1d14:	80 40       	sbci	r24, 0x00	; 0
    1d16:	90 48       	sbci	r25, 0x80	; 128
    1d18:	68 83       	st	Y, r22
    1d1a:	79 83       	std	Y+1, r23	; 0x01
    1d1c:	8a 83       	std	Y+2, r24	; 0x02
    1d1e:	9b 83       	std	Y+3, r25	; 0x03
    1d20:	9b 01       	movw	r18, r22
    1d22:	3f 77       	andi	r19, 0x7F	; 127
    1d24:	c9 01       	movw	r24, r18
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	ea e0       	ldi	r30, 0x0A	; 10
    1d2c:	0c 94 09 0f 	jmp	0x1e12	; 0x1e12 <__epilogue_restores__+0x10>

00001d30 <rand_r>:
    1d30:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <do_rand>
    1d34:	08 95       	ret

00001d36 <rand>:
    1d36:	85 e7       	ldi	r24, 0x75	; 117
    1d38:	93 e0       	ldi	r25, 0x03	; 3
    1d3a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <do_rand>
    1d3e:	08 95       	ret

00001d40 <srand>:
    1d40:	a0 e0       	ldi	r26, 0x00	; 0
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	80 93 75 03 	sts	0x0375, r24
    1d48:	90 93 76 03 	sts	0x0376, r25
    1d4c:	a0 93 77 03 	sts	0x0377, r26
    1d50:	b0 93 78 03 	sts	0x0378, r27
    1d54:	08 95       	ret

00001d56 <__mulsi3>:
    1d56:	62 9f       	mul	r22, r18
    1d58:	d0 01       	movw	r26, r0
    1d5a:	73 9f       	mul	r23, r19
    1d5c:	f0 01       	movw	r30, r0
    1d5e:	82 9f       	mul	r24, r18
    1d60:	e0 0d       	add	r30, r0
    1d62:	f1 1d       	adc	r31, r1
    1d64:	64 9f       	mul	r22, r20
    1d66:	e0 0d       	add	r30, r0
    1d68:	f1 1d       	adc	r31, r1
    1d6a:	92 9f       	mul	r25, r18
    1d6c:	f0 0d       	add	r31, r0
    1d6e:	83 9f       	mul	r24, r19
    1d70:	f0 0d       	add	r31, r0
    1d72:	74 9f       	mul	r23, r20
    1d74:	f0 0d       	add	r31, r0
    1d76:	65 9f       	mul	r22, r21
    1d78:	f0 0d       	add	r31, r0
    1d7a:	99 27       	eor	r25, r25
    1d7c:	72 9f       	mul	r23, r18
    1d7e:	b0 0d       	add	r27, r0
    1d80:	e1 1d       	adc	r30, r1
    1d82:	f9 1f       	adc	r31, r25
    1d84:	63 9f       	mul	r22, r19
    1d86:	b0 0d       	add	r27, r0
    1d88:	e1 1d       	adc	r30, r1
    1d8a:	f9 1f       	adc	r31, r25
    1d8c:	bd 01       	movw	r22, r26
    1d8e:	cf 01       	movw	r24, r30
    1d90:	11 24       	eor	r1, r1
    1d92:	08 95       	ret

00001d94 <__divmodsi4>:
    1d94:	97 fb       	bst	r25, 7
    1d96:	09 2e       	mov	r0, r25
    1d98:	05 26       	eor	r0, r21
    1d9a:	0e d0       	rcall	.+28     	; 0x1db8 <__divmodsi4_neg1>
    1d9c:	57 fd       	sbrc	r21, 7
    1d9e:	04 d0       	rcall	.+8      	; 0x1da8 <__divmodsi4_neg2>
    1da0:	4b d0       	rcall	.+150    	; 0x1e38 <__udivmodsi4>
    1da2:	0a d0       	rcall	.+20     	; 0x1db8 <__divmodsi4_neg1>
    1da4:	00 1c       	adc	r0, r0
    1da6:	38 f4       	brcc	.+14     	; 0x1db6 <__divmodsi4_exit>

00001da8 <__divmodsi4_neg2>:
    1da8:	50 95       	com	r21
    1daa:	40 95       	com	r20
    1dac:	30 95       	com	r19
    1dae:	21 95       	neg	r18
    1db0:	3f 4f       	sbci	r19, 0xFF	; 255
    1db2:	4f 4f       	sbci	r20, 0xFF	; 255
    1db4:	5f 4f       	sbci	r21, 0xFF	; 255

00001db6 <__divmodsi4_exit>:
    1db6:	08 95       	ret

00001db8 <__divmodsi4_neg1>:
    1db8:	f6 f7       	brtc	.-4      	; 0x1db6 <__divmodsi4_exit>
    1dba:	90 95       	com	r25
    1dbc:	80 95       	com	r24
    1dbe:	70 95       	com	r23
    1dc0:	61 95       	neg	r22
    1dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc4:	8f 4f       	sbci	r24, 0xFF	; 255
    1dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc8:	08 95       	ret

00001dca <__prologue_saves__>:
    1dca:	2f 92       	push	r2
    1dcc:	3f 92       	push	r3
    1dce:	4f 92       	push	r4
    1dd0:	5f 92       	push	r5
    1dd2:	6f 92       	push	r6
    1dd4:	7f 92       	push	r7
    1dd6:	8f 92       	push	r8
    1dd8:	9f 92       	push	r9
    1dda:	af 92       	push	r10
    1ddc:	bf 92       	push	r11
    1dde:	cf 92       	push	r12
    1de0:	df 92       	push	r13
    1de2:	ef 92       	push	r14
    1de4:	ff 92       	push	r15
    1de6:	0f 93       	push	r16
    1de8:	1f 93       	push	r17
    1dea:	cf 93       	push	r28
    1dec:	df 93       	push	r29
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
    1df2:	ca 1b       	sub	r28, r26
    1df4:	db 0b       	sbc	r29, r27
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	f8 94       	cli
    1dfa:	de bf       	out	0x3e, r29	; 62
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	cd bf       	out	0x3d, r28	; 61
    1e00:	09 94       	ijmp

00001e02 <__epilogue_restores__>:
    1e02:	2a 88       	ldd	r2, Y+18	; 0x12
    1e04:	39 88       	ldd	r3, Y+17	; 0x11
    1e06:	48 88       	ldd	r4, Y+16	; 0x10
    1e08:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e0a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e0c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e0e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e10:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e12:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e14:	b9 84       	ldd	r11, Y+9	; 0x09
    1e16:	c8 84       	ldd	r12, Y+8	; 0x08
    1e18:	df 80       	ldd	r13, Y+7	; 0x07
    1e1a:	ee 80       	ldd	r14, Y+6	; 0x06
    1e1c:	fd 80       	ldd	r15, Y+5	; 0x05
    1e1e:	0c 81       	ldd	r16, Y+4	; 0x04
    1e20:	1b 81       	ldd	r17, Y+3	; 0x03
    1e22:	aa 81       	ldd	r26, Y+2	; 0x02
    1e24:	b9 81       	ldd	r27, Y+1	; 0x01
    1e26:	ce 0f       	add	r28, r30
    1e28:	d1 1d       	adc	r29, r1
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	f8 94       	cli
    1e2e:	de bf       	out	0x3e, r29	; 62
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	cd bf       	out	0x3d, r28	; 61
    1e34:	ed 01       	movw	r28, r26
    1e36:	08 95       	ret

00001e38 <__udivmodsi4>:
    1e38:	a1 e2       	ldi	r26, 0x21	; 33
    1e3a:	1a 2e       	mov	r1, r26
    1e3c:	aa 1b       	sub	r26, r26
    1e3e:	bb 1b       	sub	r27, r27
    1e40:	fd 01       	movw	r30, r26
    1e42:	0d c0       	rjmp	.+26     	; 0x1e5e <__udivmodsi4_ep>

00001e44 <__udivmodsi4_loop>:
    1e44:	aa 1f       	adc	r26, r26
    1e46:	bb 1f       	adc	r27, r27
    1e48:	ee 1f       	adc	r30, r30
    1e4a:	ff 1f       	adc	r31, r31
    1e4c:	a2 17       	cp	r26, r18
    1e4e:	b3 07       	cpc	r27, r19
    1e50:	e4 07       	cpc	r30, r20
    1e52:	f5 07       	cpc	r31, r21
    1e54:	20 f0       	brcs	.+8      	; 0x1e5e <__udivmodsi4_ep>
    1e56:	a2 1b       	sub	r26, r18
    1e58:	b3 0b       	sbc	r27, r19
    1e5a:	e4 0b       	sbc	r30, r20
    1e5c:	f5 0b       	sbc	r31, r21

00001e5e <__udivmodsi4_ep>:
    1e5e:	66 1f       	adc	r22, r22
    1e60:	77 1f       	adc	r23, r23
    1e62:	88 1f       	adc	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	1a 94       	dec	r1
    1e68:	69 f7       	brne	.-38     	; 0x1e44 <__udivmodsi4_loop>
    1e6a:	60 95       	com	r22
    1e6c:	70 95       	com	r23
    1e6e:	80 95       	com	r24
    1e70:	90 95       	com	r25
    1e72:	9b 01       	movw	r18, r22
    1e74:	ac 01       	movw	r20, r24
    1e76:	bd 01       	movw	r22, r26
    1e78:	cf 01       	movw	r24, r30
    1e7a:	08 95       	ret

00001e7c <_exit>:
    1e7c:	f8 94       	cli

00001e7e <__stop_program>:
    1e7e:	ff cf       	rjmp	.-2      	; 0x1e7e <__stop_program>
